// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not explode with null challenge 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeProgress
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders with props as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeProgress
    challenge={
        Object {
            "actions": Object {
              "available": 3,
              "completed": 2,
              "total": 5,
            },
            "id": 123,
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ResponsiveBar
        animate={true}
        axisBottom={
                Object {
                        "format": [Function],
                        "tickCount": 5,
                      }
        }
        axisLeft={
                Object {
                        "tickCount": 0,
                        "tickValues": Array [],
                      }
        }
        borderColor="inherit:darker(1.6)"
        colorBy={[Function]}
        data={
                Array [
                        Object {
                          "label": undefined,
                          "undefined": NaN,
                        },
                      ]
        }
        enableAxisLeft={false}
        enableGridY={false}
        enableLabel={false}
        indexBy="label"
        keys={
                Array [
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                      ]
        }
        layout="horizontal"
        margin={
                Object {
                        "bottom": 25,
                        "left": 7,
                        "right": 15,
                        "top": 5,
                      }
        }
        maxValue={100}
        minValue={0}
        motionDamping={15}
        motionStiffness={90}
        tooltipFormat={[Function]}
/>,
      "className": "challenge-task-progress",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "animate": true,
        "axisBottom": Object {
          "format": [Function],
          "tickCount": 5,
        },
        "axisLeft": Object {
          "tickCount": 0,
          "tickValues": Array [],
        },
        "borderColor": "inherit:darker(1.6)",
        "colorBy": [Function],
        "data": Array [
          Object {
            "label": undefined,
            "undefined": NaN,
          },
        ],
        "enableAxisLeft": false,
        "enableGridY": false,
        "enableLabel": false,
        "indexBy": "label",
        "keys": Array [
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ],
        "layout": "horizontal",
        "margin": Object {
          "bottom": 25,
          "left": 7,
          "right": 15,
          "top": 5,
        },
        "maxValue": 100,
        "minValue": 0,
        "motionDamping": 15,
        "motionStiffness": 90,
        "tooltipFormat": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ResponsiveBar
          animate={true}
          axisBottom={
                    Object {
                              "format": [Function],
                              "tickCount": 5,
                            }
          }
          axisLeft={
                    Object {
                              "tickCount": 0,
                              "tickValues": Array [],
                            }
          }
          borderColor="inherit:darker(1.6)"
          colorBy={[Function]}
          data={
                    Array [
                              Object {
                                "label": undefined,
                                "undefined": NaN,
                              },
                            ]
          }
          enableAxisLeft={false}
          enableGridY={false}
          enableLabel={false}
          indexBy="label"
          keys={
                    Array [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                            ]
          }
          layout="horizontal"
          margin={
                    Object {
                              "bottom": 25,
                              "left": 7,
                              "right": 15,
                              "top": 5,
                            }
          }
          maxValue={100}
          minValue={0}
          motionDamping={15}
          motionStiffness={90}
          tooltipFormat={[Function]}
/>,
        "className": "challenge-task-progress",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "animate": true,
          "axisBottom": Object {
            "format": [Function],
            "tickCount": 5,
          },
          "axisLeft": Object {
            "tickCount": 0,
            "tickValues": Array [],
          },
          "borderColor": "inherit:darker(1.6)",
          "colorBy": [Function],
          "data": Array [
            Object {
              "label": undefined,
              "undefined": NaN,
            },
          ],
          "enableAxisLeft": false,
          "enableGridY": false,
          "enableLabel": false,
          "indexBy": "label",
          "keys": Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          ],
          "layout": "horizontal",
          "margin": Object {
            "bottom": 25,
            "left": 7,
            "right": 15,
            "top": 5,
          },
          "maxValue": 100,
          "minValue": 0,
          "motionDamping": 15,
          "motionStiffness": 90,
          "tooltipFormat": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

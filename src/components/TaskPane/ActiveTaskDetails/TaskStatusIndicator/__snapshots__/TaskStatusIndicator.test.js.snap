// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not show the task status for created status by default 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskStatusIndicator
    allStatuses={false}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    isMinimized={false}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 0,
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`does show created task status if allStatuses is set to true 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskStatusIndicator
    allStatuses={true}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    isMinimized={false}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 0,
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="active-task-details--sub-heading"
>
          <FormattedMessage
                    defaultMessage="Existing Status"
                    id="ActiveTask.subheading.status"
                    values={Object {}}
          />
</div>,
        <div>
          <div
                    className="task-status__label"
          >
                    <FormattedMessage
                              defaultMessage="Created"
                              id="Task.status.created"
                              values={Object {}}
                    />
          </div>
</div>,
      ],
      "className": "task-status active-task-controls__vertical-control-block active-task-details--bordered",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="Existing Status"
            id="ActiveTask.subheading.status"
            values={Object {}}
/>,
          "className": "active-task-details--sub-heading",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Existing Status",
            "id": "ActiveTask.subheading.status",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="task-status__label"
>
            <FormattedMessage
                        defaultMessage="Created"
                        id="Task.status.created"
                        values={Object {}}
            />
</div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FormattedMessage
                defaultMessage="Created"
                id="Task.status.created"
                values={Object {}}
/>,
              false,
            ],
            "className": "task-status__label",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Created",
                "id": "Task.status.created",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="active-task-details--sub-heading"
>
            <FormattedMessage
                        defaultMessage="Existing Status"
                        id="ActiveTask.subheading.status"
                        values={Object {}}
            />
</div>,
          <div>
            <div
                        className="task-status__label"
            >
                        <FormattedMessage
                                    defaultMessage="Created"
                                    id="Task.status.created"
                                    values={Object {}}
                        />
            </div>
</div>,
        ],
        "className": "task-status active-task-controls__vertical-control-block active-task-details--bordered",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Existing Status"
              id="ActiveTask.subheading.status"
              values={Object {}}
/>,
            "className": "active-task-details--sub-heading",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Existing Status",
              "id": "ActiveTask.subheading.status",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="task-status__label"
>
              <FormattedMessage
                            defaultMessage="Created"
                            id="Task.status.created"
                            values={Object {}}
              />
</div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <FormattedMessage
                  defaultMessage="Created"
                  id="Task.status.created"
                  values={Object {}}
/>,
                false,
              ],
              "className": "task-status__label",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Created",
                  "id": "Task.status.created",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows popout control when minimized 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskStatusIndicator
    allStatuses={false}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    isMinimized={true}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 3,
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <div
          className="popout-content__header active-task-details--bordered"
>
          <h3
                    className="info-popout--name"
          >
                    <FormattedMessage
                              defaultMessage="Existing Status"
                              id="ActiveTask.subheading.status"
                              values={Object {}}
                    />
          </h3>
</div>,
        <div
          className="popout-content__body"
>
          <span
                    className="task-status__label"
          >
                    <FormattedMessage
                              defaultMessage="Skipped"
                              id="Task.status.skipped"
                              values={Object {}}
                    />
          </span>
</div>,
      ],
      "className": "task-status-popout",
      "control": <button
        className="button icon-only task-status"
>
        <span
                className="control-icon"
                title="Existing Status"
        >
                <SvgSymbol
                        sym="flag-icon"
                        viewBox="0 0 20 20"
                />
        </span>
</button>,
      "direction": "right",
      "eventTypes": Array [
        "mousedown",
        "touchstart",
      ],
      "excludeScrollbar": false,
      "outsideClickIgnoreClass": "ignore-react-onclickoutside",
      "preventDefault": false,
      "stopPropagation": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h3
            className="info-popout--name"
>
            <FormattedMessage
                        defaultMessage="Existing Status"
                        id="ActiveTask.subheading.status"
                        values={Object {}}
            />
</h3>,
          "className": "popout-content__header active-task-details--bordered",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Existing Status"
              id="ActiveTask.subheading.status"
              values={Object {}}
/>,
            "className": "info-popout--name",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Existing Status",
              "id": "ActiveTask.subheading.status",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "h3",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span
            className="task-status__label"
>
            <FormattedMessage
                        defaultMessage="Skipped"
                        id="Task.status.skipped"
                        values={Object {}}
            />
</span>,
          "className": "popout-content__body",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Skipped"
              id="Task.status.skipped"
              values={Object {}}
/>,
            "className": "task-status__label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Skipped",
              "id": "Task.status.skipped",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <div
            className="popout-content__header active-task-details--bordered"
>
            <h3
                        className="info-popout--name"
            >
                        <FormattedMessage
                                    defaultMessage="Existing Status"
                                    id="ActiveTask.subheading.status"
                                    values={Object {}}
                        />
            </h3>
</div>,
          <div
            className="popout-content__body"
>
            <span
                        className="task-status__label"
            >
                        <FormattedMessage
                                    defaultMessage="Skipped"
                                    id="Task.status.skipped"
                                    values={Object {}}
                        />
            </span>
</div>,
        ],
        "className": "task-status-popout",
        "control": <button
          className="button icon-only task-status"
>
          <span
                    className="control-icon"
                    title="Existing Status"
          >
                    <SvgSymbol
                              sym="flag-icon"
                              viewBox="0 0 20 20"
                    />
          </span>
</button>,
        "direction": "right",
        "eventTypes": Array [
          "mousedown",
          "touchstart",
        ],
        "excludeScrollbar": false,
        "outsideClickIgnoreClass": "ignore-react-onclickoutside",
        "preventDefault": false,
        "stopPropagation": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3
              className="info-popout--name"
>
              <FormattedMessage
                            defaultMessage="Existing Status"
                            id="ActiveTask.subheading.status"
                            values={Object {}}
              />
</h3>,
            "className": "popout-content__header active-task-details--bordered",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FormattedMessage
                defaultMessage="Existing Status"
                id="ActiveTask.subheading.status"
                values={Object {}}
/>,
              "className": "info-popout--name",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Existing Status",
                "id": "ActiveTask.subheading.status",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "h3",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span
              className="task-status__label"
>
              <FormattedMessage
                            defaultMessage="Skipped"
                            id="Task.status.skipped"
                            values={Object {}}
              />
</span>,
            "className": "popout-content__body",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FormattedMessage
                defaultMessage="Skipped"
                id="Task.status.skipped"
                values={Object {}}
/>,
              "className": "task-status__label",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Skipped",
                "id": "Task.status.skipped",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "span",
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows the task status for a non-created status 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskStatusIndicator
    allStatuses={false}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    isMinimized={false}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 3,
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="active-task-details--sub-heading"
>
          <FormattedMessage
                    defaultMessage="Existing Status"
                    id="ActiveTask.subheading.status"
                    values={Object {}}
          />
</div>,
        <div>
          <div
                    className="task-status__label"
          >
                    <FormattedMessage
                              defaultMessage="Skipped"
                              id="Task.status.skipped"
                              values={Object {}}
                    />
          </div>
</div>,
      ],
      "className": "task-status active-task-controls__vertical-control-block active-task-details--bordered",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="Existing Status"
            id="ActiveTask.subheading.status"
            values={Object {}}
/>,
          "className": "active-task-details--sub-heading",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Existing Status",
            "id": "ActiveTask.subheading.status",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="task-status__label"
>
            <FormattedMessage
                        defaultMessage="Skipped"
                        id="Task.status.skipped"
                        values={Object {}}
            />
</div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FormattedMessage
                defaultMessage="Skipped"
                id="Task.status.skipped"
                values={Object {}}
/>,
              false,
            ],
            "className": "task-status__label",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Skipped",
                "id": "Task.status.skipped",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="active-task-details--sub-heading"
>
            <FormattedMessage
                        defaultMessage="Existing Status"
                        id="ActiveTask.subheading.status"
                        values={Object {}}
            />
</div>,
          <div>
            <div
                        className="task-status__label"
            >
                        <FormattedMessage
                                    defaultMessage="Skipped"
                                    id="Task.status.skipped"
                                    values={Object {}}
                        />
            </div>
</div>,
        ],
        "className": "task-status active-task-controls__vertical-control-block active-task-details--bordered",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Existing Status"
              id="ActiveTask.subheading.status"
              values={Object {}}
/>,
            "className": "active-task-details--sub-heading",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Existing Status",
              "id": "ActiveTask.subheading.status",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="task-status__label"
>
              <FormattedMessage
                            defaultMessage="Skipped"
                            id="Task.status.skipped"
                            values={Object {}}
              />
</div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <FormattedMessage
                  defaultMessage="Skipped"
                  id="Task.status.skipped"
                  values={Object {}}
/>,
                false,
              ],
              "className": "task-status__label",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Skipped",
                  "id": "Task.status.skipped",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

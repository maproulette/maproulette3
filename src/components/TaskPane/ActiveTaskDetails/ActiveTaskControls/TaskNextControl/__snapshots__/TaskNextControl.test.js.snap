// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shows icon-only control when minimized 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskNextControl
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Next Task",
                "id": "Task.controls.next.tooltip",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "Next Task",
            },
          ],
        },
      }
    }
    isMinimized={true}
    nextTask={[MockFunction]}
    task={
      Object {
        "id": 123,
        "parent": Object {
          "id": 321,
        },
        "status": 0,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <span
        className="control-icon"
        title="Next Task"
      >
        <SvgSymbol
          sym="forward-icon"
          viewBox="0 0 20 20"
        />
      </span>,
      "className": "button icon-only next-control",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <SvgSymbol
          sym="forward-icon"
          viewBox="0 0 20 20"
        />,
        "className": "control-icon",
        "title": "Next Task",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "sym": "forward-icon",
          "viewBox": "0 0 20 20",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "span",
    },
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span
          className="control-icon"
          title="Next Task"
        >
          <SvgSymbol
            sym="forward-icon"
            viewBox="0 0 20 20"
          />
        </span>,
        "className": "button icon-only next-control",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <SvgSymbol
            sym="forward-icon"
            viewBox="0 0 20 20"
          />,
          "className": "control-icon",
          "title": "Next Task",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "sym": "forward-icon",
            "viewBox": "0 0 20 20",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows next control 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskNextControl
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Next Task",
                "id": "Task.controls.next.tooltip",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "Next Task",
            },
          ],
        },
      }
    }
    isMinimized={false}
    nextTask={[MockFunction]}
    task={
      Object {
        "id": 123,
        "parent": Object {
          "id": 321,
        },
        "status": 0,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="button is-green is-outlined next-control"
        onClick={[Function]}
        title="Next Task"
      >
        <FormattedMessage
          defaultMessage="Next Task"
          id="Task.controls.next.label"
          values={Object {}}
        />
        <SvgSymbol
          sym="forward-icon"
          viewBox="0 0 20 20"
        />
      </button>,
      "className": "has-centered-children",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <FormattedMessage
            defaultMessage="Next Task"
            id="Task.controls.next.label"
            values={Object {}}
          />,
          <SvgSymbol
            sym="forward-icon"
            viewBox="0 0 20 20"
          />,
        ],
        "className": "button is-green is-outlined next-control",
        "onClick": [Function],
        "title": "Next Task",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Next Task",
            "id": "Task.controls.next.label",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "sym": "forward-icon",
            "viewBox": "0 0 20 20",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "button",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="button is-green is-outlined next-control"
          onClick={[Function]}
          title="Next Task"
        >
          <FormattedMessage
            defaultMessage="Next Task"
            id="Task.controls.next.label"
            values={Object {}}
          />
          <SvgSymbol
            sym="forward-icon"
            viewBox="0 0 20 20"
          />
        </button>,
        "className": "has-centered-children",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FormattedMessage
              defaultMessage="Next Task"
              id="Task.controls.next.label"
              values={Object {}}
            />,
            <SvgSymbol
              sym="forward-icon"
              viewBox="0 0 20 20"
            />,
          ],
          "className": "button is-green is-outlined next-control",
          "onClick": [Function],
          "title": "Next Task",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Next Task",
              "id": "Task.controls.next.label",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "sym": "forward-icon",
              "viewBox": "0 0 20 20",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "button",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shows a dropdown of editor choices if user has not configured an editor 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControls
    activateKeyboardShortcuts={[Function]}
    comment="Foo"
    completeTask={[Function]}
    deactivateKeyboardShortcuts={[Function]}
    editTask={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          }
    }
    mapBounds={
        Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          }
    }
    saveTask={[Function]}
    setComment={[Function]}
    setTaskBeingCompleted={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          }
    }
    unsaveTask={[Function]}
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {},
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TaskCommentInput
          activateKeyboardShortcuts={[Function]}
          className="task-edit-controls__task-comment"
          comment="Foo"
          commentChanged={[Function]}
          completeTask={[Function]}
          deactivateKeyboardShortcuts={[Function]}
          editTask={[Function]}
          intl={
                    Object {
                              "formatMessage": [Function],
                            }
          }
          keyboardShortcutGroups={
                    Object {
                              "taskCompletion": Object {
                                "cancel": Object {
                                  "key": "Escape",
                                  "keyLabel": "ESC",
                                  "label": "Cancel Editing",
                                },
                              },
                              "taskEditing": Object {
                                "editId": Object {
                                  "key": "e",
                                  "label": "Edit in Id",
                                },
                                "editJosm": Object {
                                  "key": "r",
                                  "label": "Edit in JOSM",
                                },
                                "editJosmLayer": Object {
                                  "key": "t",
                                  "label": "Edit in new JOSM layer",
                                },
                                "falsePositive": Object {
                                  "key": "q",
                                  "label": "Not an Issue",
                                },
                                "skip": Object {
                                  "key": "w",
                                  "label": "Skip",
                                },
                              },
                            }
          }
          mapBounds={
                    Object {
                              "task": Object {
                                "bounds": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                              },
                            }
          }
          saveTask={[Function]}
          setComment={[Function]}
          setTaskBeingCompleted={[Function]}
          task={
                    Object {
                              "id": 123,
                              "parent": Object {
                                "id": 321,
                              },
                            }
          }
          unsaveTask={[Function]}
          user={
                    Object {
                              "id": 357,
                              "isLoggedIn": true,
                              "settings": Object {},
                            }
          }
          value="Foo"
/>,
        <div
          className="task-edit-controls__control-block"
>
          <OnClickOutside(WithDeactivateOnOutsideClick)
                    className="task-edit-controls__editor-dropdown"
                    eventTypes={
                              Array [
                                        "mousedown",
                                        "touchstart",
                                      ]
                    }
                    excludeScrollbar={false}
                    onSelect={[Function]}
                    options={
                              Array [
                                        Object {
                                          "key": 0,
                                          "text": "Edit in iD",
                                          "value": 0,
                                        },
                                        Object {
                                          "key": 1,
                                          "text": "Edit in JOSM",
                                          "value": 1,
                                        },
                                        Object {
                                          "key": 2,
                                          "text": "Edit in new JOSM layer",
                                          "value": 2,
                                        },
                                      ]
                    }
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    stopPropagation={false}
          >
                    <button
                              className="button task-edit-controls__edit-control large-and-wide"
                    >
                              <span
                                        className="control-icon"
                                        title={undefined}
                              >
                                        <SvgSymbol
                                                  sym="edit-icon"
                                                  viewBox="0 0 20 20"
                                        />
                              </span>
                              <span
                                        className="control-label"
                              >
                                        <FormattedMessage
                                                  defaultMessage="Fix"
                                                  id="Task.controls.fix.label"
                                                  values={Object {}}
                                        />
                              </span>
                    </button>
          </OnClickOutside(WithDeactivateOnOutsideClick)>
          <button
                    className="button task-edit-controls__false-positive-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <button
                    className="button task-edit-controls__skip-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <TaskSaveControls
                    activateKeyboardShortcuts={[Function]}
                    comment="Foo"
                    completeTask={[Function]}
                    deactivateKeyboardShortcuts={[Function]}
                    editTask={[Function]}
                    intl={
                              Object {
                                        "formatMessage": [Function],
                                      }
                    }
                    keyboardShortcutGroups={
                              Object {
                                        "taskCompletion": Object {
                                          "cancel": Object {
                                            "key": "Escape",
                                            "keyLabel": "ESC",
                                            "label": "Cancel Editing",
                                          },
                                        },
                                        "taskEditing": Object {
                                          "editId": Object {
                                            "key": "e",
                                            "label": "Edit in Id",
                                          },
                                          "editJosm": Object {
                                            "key": "r",
                                            "label": "Edit in JOSM",
                                          },
                                          "editJosmLayer": Object {
                                            "key": "t",
                                            "label": "Edit in new JOSM layer",
                                          },
                                          "falsePositive": Object {
                                            "key": "q",
                                            "label": "Not an Issue",
                                          },
                                          "skip": Object {
                                            "key": "w",
                                            "label": "Skip",
                                          },
                                        },
                                      }
                    }
                    mapBounds={
                              Object {
                                        "task": Object {
                                          "bounds": Array [
                                            0,
                                            0,
                                            0,
                                            0,
                                          ],
                                        },
                                      }
                    }
                    saveTask={[Function]}
                    setComment={[Function]}
                    setTaskBeingCompleted={[Function]}
                    task={
                              Object {
                                        "id": 123,
                                        "parent": Object {
                                          "id": 321,
                                        },
                                      }
                    }
                    unsaveTask={[Function]}
                    user={
                              Object {
                                        "id": 357,
                                        "isLoggedIn": true,
                                        "settings": Object {},
                                      }
                    }
          />
</div>,
      ],
      "className": "task-edit-controls",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activateKeyboardShortcuts": [Function],
          "className": "task-edit-controls__task-comment",
          "comment": "Foo",
          "commentChanged": [Function],
          "completeTask": [Function],
          "deactivateKeyboardShortcuts": [Function],
          "editTask": [Function],
          "intl": Object {
            "formatMessage": [Function],
          },
          "keyboardShortcutGroups": Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          },
          "mapBounds": Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          },
          "saveTask": [Function],
          "setComment": [Function],
          "setTaskBeingCompleted": [Function],
          "task": Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          },
          "unsaveTask": [Function],
          "user": Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {},
          },
          "value": "Foo",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <OnClickOutside(WithDeactivateOnOutsideClick)
              className="task-edit-controls__editor-dropdown"
              eventTypes={
                            Array [
                                          "mousedown",
                                          "touchstart",
                                        ]
              }
              excludeScrollbar={false}
              onSelect={[Function]}
              options={
                            Array [
                                          Object {
                                            "key": 0,
                                            "text": "Edit in iD",
                                            "value": 0,
                                          },
                                          Object {
                                            "key": 1,
                                            "text": "Edit in JOSM",
                                            "value": 1,
                                          },
                                          Object {
                                            "key": 2,
                                            "text": "Edit in new JOSM layer",
                                            "value": 2,
                                          },
                                        ]
              }
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
>
              <button
                            className="button task-edit-controls__edit-control large-and-wide"
              >
                            <span
                                          className="control-icon"
                                          title={undefined}
                            >
                                          <SvgSymbol
                                                        sym="edit-icon"
                                                        viewBox="0 0 20 20"
                                          />
                            </span>
                            <span
                                          className="control-label"
                            >
                                          <FormattedMessage
                                                        defaultMessage="Fix"
                                                        id="Task.controls.fix.label"
                                                        values={Object {}}
                                          />
                            </span>
              </button>
</OnClickOutside(WithDeactivateOnOutsideClick)>,
            <button
              className="button task-edit-controls__false-positive-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="check-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Not an Issue"
                                          id="Task.controls.falsePositive.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <button
              className="button task-edit-controls__skip-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="skip-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Skip"
                                          id="Task.controls.skip.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <TaskSaveControls
              activateKeyboardShortcuts={[Function]}
              comment="Foo"
              completeTask={[Function]}
              deactivateKeyboardShortcuts={[Function]}
              editTask={[Function]}
              intl={
                            Object {
                                          "formatMessage": [Function],
                                        }
              }
              keyboardShortcutGroups={
                            Object {
                                          "taskCompletion": Object {
                                            "cancel": Object {
                                              "key": "Escape",
                                              "keyLabel": "ESC",
                                              "label": "Cancel Editing",
                                            },
                                          },
                                          "taskEditing": Object {
                                            "editId": Object {
                                              "key": "e",
                                              "label": "Edit in Id",
                                            },
                                            "editJosm": Object {
                                              "key": "r",
                                              "label": "Edit in JOSM",
                                            },
                                            "editJosmLayer": Object {
                                              "key": "t",
                                              "label": "Edit in new JOSM layer",
                                            },
                                            "falsePositive": Object {
                                              "key": "q",
                                              "label": "Not an Issue",
                                            },
                                            "skip": Object {
                                              "key": "w",
                                              "label": "Skip",
                                            },
                                          },
                                        }
              }
              mapBounds={
                            Object {
                                          "task": Object {
                                            "bounds": Array [
                                              0,
                                              0,
                                              0,
                                              0,
                                            ],
                                          },
                                        }
              }
              saveTask={[Function]}
              setComment={[Function]}
              setTaskBeingCompleted={[Function]}
              task={
                            Object {
                                          "id": 123,
                                          "parent": Object {
                                            "id": 321,
                                          },
                                        }
              }
              unsaveTask={[Function]}
              user={
                            Object {
                                          "id": 357,
                                          "isLoggedIn": true,
                                          "settings": Object {},
                                        }
              }
/>,
          ],
          "className": "task-edit-controls__control-block",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="button task-edit-controls__edit-control large-and-wide"
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="edit-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Fix"
                                                id="Task.controls.fix.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              "className": "task-edit-controls__editor-dropdown",
              "eventTypes": Array [
                "mousedown",
                "touchstart",
              ],
              "excludeScrollbar": false,
              "onSelect": [Function],
              "options": Array [
                Object {
                  "key": 0,
                  "text": "Edit in iD",
                  "value": 0,
                },
                Object {
                  "key": 1,
                  "text": "Edit in JOSM",
                  "value": 1,
                },
                Object {
                  "key": 2,
                  "text": "Edit in new JOSM layer",
                  "value": 2,
                },
              ],
              "outsideClickIgnoreClass": "ignore-react-onclickoutside",
              "preventDefault": false,
              "stopPropagation": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="edit-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Fix"
                                        id="Task.controls.fix.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__edit-control large-and-wide",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="edit-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "edit-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Fix"
                      id="Task.controls.fix.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Fix",
                      "id": "Task.controls.fix.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="check-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Not an Issue"
                                    id="Task.controls.falsePositive.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__false-positive-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="check-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "check-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Not an Issue"
                    id="Task.controls.falsePositive.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Not an Issue",
                    "id": "Task.controls.falsePositive.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="skip-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Skip"
                                    id="Task.controls.skip.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__skip-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="skip-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "skip-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Skip"
                    id="Task.controls.skip.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Skip",
                    "id": "Task.controls.skip.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activateKeyboardShortcuts": [Function],
              "comment": "Foo",
              "completeTask": [Function],
              "deactivateKeyboardShortcuts": [Function],
              "editTask": [Function],
              "intl": Object {
                "formatMessage": [Function],
              },
              "keyboardShortcutGroups": Object {
                "taskCompletion": Object {
                  "cancel": Object {
                    "key": "Escape",
                    "keyLabel": "ESC",
                    "label": "Cancel Editing",
                  },
                },
                "taskEditing": Object {
                  "editId": Object {
                    "key": "e",
                    "label": "Edit in Id",
                  },
                  "editJosm": Object {
                    "key": "r",
                    "label": "Edit in JOSM",
                  },
                  "editJosmLayer": Object {
                    "key": "t",
                    "label": "Edit in new JOSM layer",
                  },
                  "falsePositive": Object {
                    "key": "q",
                    "label": "Not an Issue",
                  },
                  "skip": Object {
                    "key": "w",
                    "label": "Skip",
                  },
                },
              },
              "mapBounds": Object {
                "task": Object {
                  "bounds": Array [
                    0,
                    0,
                    0,
                    0,
                  ],
                },
              },
              "saveTask": [Function],
              "setComment": [Function],
              "setTaskBeingCompleted": [Function],
              "task": Object {
                "id": 123,
                "parent": Object {
                  "id": 321,
                },
              },
              "unsaveTask": [Function],
              "user": Object {
                "id": 357,
                "isLoggedIn": true,
                "settings": Object {},
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TaskCommentInput
            activateKeyboardShortcuts={[Function]}
            className="task-edit-controls__task-comment"
            comment="Foo"
            commentChanged={[Function]}
            completeTask={[Function]}
            deactivateKeyboardShortcuts={[Function]}
            editTask={[Function]}
            intl={
                        Object {
                                    "formatMessage": [Function],
                                  }
            }
            keyboardShortcutGroups={
                        Object {
                                    "taskCompletion": Object {
                                      "cancel": Object {
                                        "key": "Escape",
                                        "keyLabel": "ESC",
                                        "label": "Cancel Editing",
                                      },
                                    },
                                    "taskEditing": Object {
                                      "editId": Object {
                                        "key": "e",
                                        "label": "Edit in Id",
                                      },
                                      "editJosm": Object {
                                        "key": "r",
                                        "label": "Edit in JOSM",
                                      },
                                      "editJosmLayer": Object {
                                        "key": "t",
                                        "label": "Edit in new JOSM layer",
                                      },
                                      "falsePositive": Object {
                                        "key": "q",
                                        "label": "Not an Issue",
                                      },
                                      "skip": Object {
                                        "key": "w",
                                        "label": "Skip",
                                      },
                                    },
                                  }
            }
            mapBounds={
                        Object {
                                    "task": Object {
                                      "bounds": Array [
                                        0,
                                        0,
                                        0,
                                        0,
                                      ],
                                    },
                                  }
            }
            saveTask={[Function]}
            setComment={[Function]}
            setTaskBeingCompleted={[Function]}
            task={
                        Object {
                                    "id": 123,
                                    "parent": Object {
                                      "id": 321,
                                    },
                                  }
            }
            unsaveTask={[Function]}
            user={
                        Object {
                                    "id": 357,
                                    "isLoggedIn": true,
                                    "settings": Object {},
                                  }
            }
            value="Foo"
/>,
          <div
            className="task-edit-controls__control-block"
>
            <OnClickOutside(WithDeactivateOnOutsideClick)
                        className="task-edit-controls__editor-dropdown"
                        eventTypes={
                                    Array [
                                                "mousedown",
                                                "touchstart",
                                              ]
                        }
                        excludeScrollbar={false}
                        onSelect={[Function]}
                        options={
                                    Array [
                                                Object {
                                                  "key": 0,
                                                  "text": "Edit in iD",
                                                  "value": 0,
                                                },
                                                Object {
                                                  "key": 1,
                                                  "text": "Edit in JOSM",
                                                  "value": 1,
                                                },
                                                Object {
                                                  "key": 2,
                                                  "text": "Edit in new JOSM layer",
                                                  "value": 2,
                                                },
                                              ]
                        }
                        outsideClickIgnoreClass="ignore-react-onclickoutside"
                        preventDefault={false}
                        stopPropagation={false}
            >
                        <button
                                    className="button task-edit-controls__edit-control large-and-wide"
                        >
                                    <span
                                                className="control-icon"
                                                title={undefined}
                                    >
                                                <SvgSymbol
                                                            sym="edit-icon"
                                                            viewBox="0 0 20 20"
                                                />
                                    </span>
                                    <span
                                                className="control-label"
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Fix"
                                                            id="Task.controls.fix.label"
                                                            values={Object {}}
                                                />
                                    </span>
                        </button>
            </OnClickOutside(WithDeactivateOnOutsideClick)>
            <button
                        className="button task-edit-controls__false-positive-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <button
                        className="button task-edit-controls__skip-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <TaskSaveControls
                        activateKeyboardShortcuts={[Function]}
                        comment="Foo"
                        completeTask={[Function]}
                        deactivateKeyboardShortcuts={[Function]}
                        editTask={[Function]}
                        intl={
                                    Object {
                                                "formatMessage": [Function],
                                              }
                        }
                        keyboardShortcutGroups={
                                    Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                        }
                        mapBounds={
                                    Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                        }
                        saveTask={[Function]}
                        setComment={[Function]}
                        setTaskBeingCompleted={[Function]}
                        task={
                                    Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                        }
                        unsaveTask={[Function]}
                        user={
                                    Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {},
                                              }
                        }
            />
</div>,
        ],
        "className": "task-edit-controls",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activateKeyboardShortcuts": [Function],
            "className": "task-edit-controls__task-comment",
            "comment": "Foo",
            "commentChanged": [Function],
            "completeTask": [Function],
            "deactivateKeyboardShortcuts": [Function],
            "editTask": [Function],
            "intl": Object {
              "formatMessage": [Function],
            },
            "keyboardShortcutGroups": Object {
              "taskCompletion": Object {
                "cancel": Object {
                  "key": "Escape",
                  "keyLabel": "ESC",
                  "label": "Cancel Editing",
                },
              },
              "taskEditing": Object {
                "editId": Object {
                  "key": "e",
                  "label": "Edit in Id",
                },
                "editJosm": Object {
                  "key": "r",
                  "label": "Edit in JOSM",
                },
                "editJosmLayer": Object {
                  "key": "t",
                  "label": "Edit in new JOSM layer",
                },
                "falsePositive": Object {
                  "key": "q",
                  "label": "Not an Issue",
                },
                "skip": Object {
                  "key": "w",
                  "label": "Skip",
                },
              },
            },
            "mapBounds": Object {
              "task": Object {
                "bounds": Array [
                  0,
                  0,
                  0,
                  0,
                ],
              },
            },
            "saveTask": [Function],
            "setComment": [Function],
            "setTaskBeingCompleted": [Function],
            "task": Object {
              "id": 123,
              "parent": Object {
                "id": 321,
              },
            },
            "unsaveTask": [Function],
            "user": Object {
              "id": 357,
              "isLoggedIn": true,
              "settings": Object {},
            },
            "value": "Foo",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <OnClickOutside(WithDeactivateOnOutsideClick)
                className="task-edit-controls__editor-dropdown"
                eventTypes={
                                Array [
                                                "mousedown",
                                                "touchstart",
                                              ]
                }
                excludeScrollbar={false}
                onSelect={[Function]}
                options={
                                Array [
                                                Object {
                                                  "key": 0,
                                                  "text": "Edit in iD",
                                                  "value": 0,
                                                },
                                                Object {
                                                  "key": 1,
                                                  "text": "Edit in JOSM",
                                                  "value": 1,
                                                },
                                                Object {
                                                  "key": 2,
                                                  "text": "Edit in new JOSM layer",
                                                  "value": 2,
                                                },
                                              ]
                }
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
>
                <button
                                className="button task-edit-controls__edit-control large-and-wide"
                >
                                <span
                                                className="control-icon"
                                                title={undefined}
                                >
                                                <SvgSymbol
                                                                sym="edit-icon"
                                                                viewBox="0 0 20 20"
                                                />
                                </span>
                                <span
                                                className="control-label"
                                >
                                                <FormattedMessage
                                                                defaultMessage="Fix"
                                                                id="Task.controls.fix.label"
                                                                values={Object {}}
                                                />
                                </span>
                </button>
</OnClickOutside(WithDeactivateOnOutsideClick)>,
              <button
                className="button task-edit-controls__false-positive-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <button
                className="button task-edit-controls__skip-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <TaskSaveControls
                activateKeyboardShortcuts={[Function]}
                comment="Foo"
                completeTask={[Function]}
                deactivateKeyboardShortcuts={[Function]}
                editTask={[Function]}
                intl={
                                Object {
                                                "formatMessage": [Function],
                                              }
                }
                keyboardShortcutGroups={
                                Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                }
                mapBounds={
                                Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                }
                saveTask={[Function]}
                setComment={[Function]}
                setTaskBeingCompleted={[Function]}
                task={
                                Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                }
                unsaveTask={[Function]}
                user={
                                Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {},
                                              }
                }
/>,
            ],
            "className": "task-edit-controls__control-block",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="button task-edit-controls__edit-control large-and-wide"
>
                  <span
                                    className="control-icon"
                                    title={undefined}
                  >
                                    <SvgSymbol
                                                      sym="edit-icon"
                                                      viewBox="0 0 20 20"
                                    />
                  </span>
                  <span
                                    className="control-label"
                  >
                                    <FormattedMessage
                                                      defaultMessage="Fix"
                                                      id="Task.controls.fix.label"
                                                      values={Object {}}
                                    />
                  </span>
</button>,
                "className": "task-edit-controls__editor-dropdown",
                "eventTypes": Array [
                  "mousedown",
                  "touchstart",
                ],
                "excludeScrollbar": false,
                "onSelect": [Function],
                "options": Array [
                  Object {
                    "key": 0,
                    "text": "Edit in iD",
                    "value": 0,
                  },
                  Object {
                    "key": 1,
                    "text": "Edit in JOSM",
                    "value": 1,
                  },
                  Object {
                    "key": 2,
                    "text": "Edit in new JOSM layer",
                    "value": 2,
                  },
                ],
                "outsideClickIgnoreClass": "ignore-react-onclickoutside",
                "preventDefault": false,
                "stopPropagation": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <span
                      className="control-icon"
                      title={undefined}
>
                      <SvgSymbol
                                            sym="edit-icon"
                                            viewBox="0 0 20 20"
                      />
</span>,
                    <span
                      className="control-label"
>
                      <FormattedMessage
                                            defaultMessage="Fix"
                                            id="Task.controls.fix.label"
                                            values={Object {}}
                      />
</span>,
                  ],
                  "className": "button task-edit-controls__edit-control large-and-wide",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <SvgSymbol
                        sym="edit-icon"
                        viewBox="0 0 20 20"
/>,
                      "className": "control-icon",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "sym": "edit-icon",
                        "viewBox": "0 0 20 20",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "span",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Fix"
                        id="Task.controls.fix.label"
                        values={Object {}}
/>,
                      "className": "control-label",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Fix",
                        "id": "Task.controls.fix.label",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "span",
                  },
                ],
                "type": "button",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__false-positive-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="check-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "check-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Not an Issue"
                      id="Task.controls.falsePositive.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Not an Issue",
                      "id": "Task.controls.falsePositive.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__skip-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="skip-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "skip-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Skip"
                      id="Task.controls.skip.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Skip",
                      "id": "Task.controls.skip.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activateKeyboardShortcuts": [Function],
                "comment": "Foo",
                "completeTask": [Function],
                "deactivateKeyboardShortcuts": [Function],
                "editTask": [Function],
                "intl": Object {
                  "formatMessage": [Function],
                },
                "keyboardShortcutGroups": Object {
                  "taskCompletion": Object {
                    "cancel": Object {
                      "key": "Escape",
                      "keyLabel": "ESC",
                      "label": "Cancel Editing",
                    },
                  },
                  "taskEditing": Object {
                    "editId": Object {
                      "key": "e",
                      "label": "Edit in Id",
                    },
                    "editJosm": Object {
                      "key": "r",
                      "label": "Edit in JOSM",
                    },
                    "editJosmLayer": Object {
                      "key": "t",
                      "label": "Edit in new JOSM layer",
                    },
                    "falsePositive": Object {
                      "key": "q",
                      "label": "Not an Issue",
                    },
                    "skip": Object {
                      "key": "w",
                      "label": "Skip",
                    },
                  },
                },
                "mapBounds": Object {
                  "task": Object {
                    "bounds": Array [
                      0,
                      0,
                      0,
                      0,
                    ],
                  },
                },
                "saveTask": [Function],
                "setComment": [Function],
                "setTaskBeingCompleted": [Function],
                "task": Object {
                  "id": 123,
                  "parent": Object {
                    "id": 321,
                  },
                },
                "unsaveTask": [Function],
                "user": Object {
                  "id": 357,
                  "isLoggedIn": true,
                  "settings": Object {},
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows an edit button for the user's configured editor 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControls
    activateKeyboardShortcuts={[Function]}
    comment="Foo"
    completeTask={[Function]}
    deactivateKeyboardShortcuts={[Function]}
    editTask={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          }
    }
    mapBounds={
        Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          }
    }
    saveTask={[Function]}
    setComment={[Function]}
    setTaskBeingCompleted={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          }
    }
    unsaveTask={[Function]}
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TaskCommentInput
          activateKeyboardShortcuts={[Function]}
          className="task-edit-controls__task-comment"
          comment="Foo"
          commentChanged={[Function]}
          completeTask={[Function]}
          deactivateKeyboardShortcuts={[Function]}
          editTask={[Function]}
          intl={
                    Object {
                              "formatMessage": [Function],
                            }
          }
          keyboardShortcutGroups={
                    Object {
                              "taskCompletion": Object {
                                "cancel": Object {
                                  "key": "Escape",
                                  "keyLabel": "ESC",
                                  "label": "Cancel Editing",
                                },
                              },
                              "taskEditing": Object {
                                "editId": Object {
                                  "key": "e",
                                  "label": "Edit in Id",
                                },
                                "editJosm": Object {
                                  "key": "r",
                                  "label": "Edit in JOSM",
                                },
                                "editJosmLayer": Object {
                                  "key": "t",
                                  "label": "Edit in new JOSM layer",
                                },
                                "falsePositive": Object {
                                  "key": "q",
                                  "label": "Not an Issue",
                                },
                                "skip": Object {
                                  "key": "w",
                                  "label": "Skip",
                                },
                              },
                            }
          }
          mapBounds={
                    Object {
                              "task": Object {
                                "bounds": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                              },
                            }
          }
          saveTask={[Function]}
          setComment={[Function]}
          setTaskBeingCompleted={[Function]}
          task={
                    Object {
                              "id": 123,
                              "parent": Object {
                                "id": 321,
                              },
                            }
          }
          unsaveTask={[Function]}
          user={
                    Object {
                              "id": 357,
                              "isLoggedIn": true,
                              "settings": Object {
                                "defaultEditor": 1,
                              },
                            }
          }
          value="Foo"
/>,
        <div
          className="task-edit-controls__control-block"
>
          <button
                    className="button task-edit-controls__edit-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="edit-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Fix"
                                        id="Task.controls.fix.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <button
                    className="button task-edit-controls__false-positive-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <button
                    className="button task-edit-controls__skip-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <TaskSaveControls
                    activateKeyboardShortcuts={[Function]}
                    comment="Foo"
                    completeTask={[Function]}
                    deactivateKeyboardShortcuts={[Function]}
                    editTask={[Function]}
                    intl={
                              Object {
                                        "formatMessage": [Function],
                                      }
                    }
                    keyboardShortcutGroups={
                              Object {
                                        "taskCompletion": Object {
                                          "cancel": Object {
                                            "key": "Escape",
                                            "keyLabel": "ESC",
                                            "label": "Cancel Editing",
                                          },
                                        },
                                        "taskEditing": Object {
                                          "editId": Object {
                                            "key": "e",
                                            "label": "Edit in Id",
                                          },
                                          "editJosm": Object {
                                            "key": "r",
                                            "label": "Edit in JOSM",
                                          },
                                          "editJosmLayer": Object {
                                            "key": "t",
                                            "label": "Edit in new JOSM layer",
                                          },
                                          "falsePositive": Object {
                                            "key": "q",
                                            "label": "Not an Issue",
                                          },
                                          "skip": Object {
                                            "key": "w",
                                            "label": "Skip",
                                          },
                                        },
                                      }
                    }
                    mapBounds={
                              Object {
                                        "task": Object {
                                          "bounds": Array [
                                            0,
                                            0,
                                            0,
                                            0,
                                          ],
                                        },
                                      }
                    }
                    saveTask={[Function]}
                    setComment={[Function]}
                    setTaskBeingCompleted={[Function]}
                    task={
                              Object {
                                        "id": 123,
                                        "parent": Object {
                                          "id": 321,
                                        },
                                      }
                    }
                    unsaveTask={[Function]}
                    user={
                              Object {
                                        "id": 357,
                                        "isLoggedIn": true,
                                        "settings": Object {
                                          "defaultEditor": 1,
                                        },
                                      }
                    }
          />
</div>,
      ],
      "className": "task-edit-controls",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activateKeyboardShortcuts": [Function],
          "className": "task-edit-controls__task-comment",
          "comment": "Foo",
          "commentChanged": [Function],
          "completeTask": [Function],
          "deactivateKeyboardShortcuts": [Function],
          "editTask": [Function],
          "intl": Object {
            "formatMessage": [Function],
          },
          "keyboardShortcutGroups": Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          },
          "mapBounds": Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          },
          "saveTask": [Function],
          "setComment": [Function],
          "setTaskBeingCompleted": [Function],
          "task": Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          },
          "unsaveTask": [Function],
          "user": Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          },
          "value": "Foo",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="button task-edit-controls__edit-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="edit-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Fix"
                                          id="Task.controls.fix.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <button
              className="button task-edit-controls__false-positive-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="check-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Not an Issue"
                                          id="Task.controls.falsePositive.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <button
              className="button task-edit-controls__skip-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="skip-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Skip"
                                          id="Task.controls.skip.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <TaskSaveControls
              activateKeyboardShortcuts={[Function]}
              comment="Foo"
              completeTask={[Function]}
              deactivateKeyboardShortcuts={[Function]}
              editTask={[Function]}
              intl={
                            Object {
                                          "formatMessage": [Function],
                                        }
              }
              keyboardShortcutGroups={
                            Object {
                                          "taskCompletion": Object {
                                            "cancel": Object {
                                              "key": "Escape",
                                              "keyLabel": "ESC",
                                              "label": "Cancel Editing",
                                            },
                                          },
                                          "taskEditing": Object {
                                            "editId": Object {
                                              "key": "e",
                                              "label": "Edit in Id",
                                            },
                                            "editJosm": Object {
                                              "key": "r",
                                              "label": "Edit in JOSM",
                                            },
                                            "editJosmLayer": Object {
                                              "key": "t",
                                              "label": "Edit in new JOSM layer",
                                            },
                                            "falsePositive": Object {
                                              "key": "q",
                                              "label": "Not an Issue",
                                            },
                                            "skip": Object {
                                              "key": "w",
                                              "label": "Skip",
                                            },
                                          },
                                        }
              }
              mapBounds={
                            Object {
                                          "task": Object {
                                            "bounds": Array [
                                              0,
                                              0,
                                              0,
                                              0,
                                            ],
                                          },
                                        }
              }
              saveTask={[Function]}
              setComment={[Function]}
              setTaskBeingCompleted={[Function]}
              task={
                            Object {
                                          "id": 123,
                                          "parent": Object {
                                            "id": 321,
                                          },
                                        }
              }
              unsaveTask={[Function]}
              user={
                            Object {
                                          "id": 357,
                                          "isLoggedIn": true,
                                          "settings": Object {
                                            "defaultEditor": 1,
                                          },
                                        }
              }
/>,
          ],
          "className": "task-edit-controls__control-block",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="edit-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Fix"
                                    id="Task.controls.fix.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__edit-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="edit-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "edit-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Fix"
                    id="Task.controls.fix.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Fix",
                    "id": "Task.controls.fix.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="check-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Not an Issue"
                                    id="Task.controls.falsePositive.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__false-positive-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="check-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "check-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Not an Issue"
                    id="Task.controls.falsePositive.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Not an Issue",
                    "id": "Task.controls.falsePositive.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="skip-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Skip"
                                    id="Task.controls.skip.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__skip-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="skip-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "skip-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Skip"
                    id="Task.controls.skip.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Skip",
                    "id": "Task.controls.skip.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activateKeyboardShortcuts": [Function],
              "comment": "Foo",
              "completeTask": [Function],
              "deactivateKeyboardShortcuts": [Function],
              "editTask": [Function],
              "intl": Object {
                "formatMessage": [Function],
              },
              "keyboardShortcutGroups": Object {
                "taskCompletion": Object {
                  "cancel": Object {
                    "key": "Escape",
                    "keyLabel": "ESC",
                    "label": "Cancel Editing",
                  },
                },
                "taskEditing": Object {
                  "editId": Object {
                    "key": "e",
                    "label": "Edit in Id",
                  },
                  "editJosm": Object {
                    "key": "r",
                    "label": "Edit in JOSM",
                  },
                  "editJosmLayer": Object {
                    "key": "t",
                    "label": "Edit in new JOSM layer",
                  },
                  "falsePositive": Object {
                    "key": "q",
                    "label": "Not an Issue",
                  },
                  "skip": Object {
                    "key": "w",
                    "label": "Skip",
                  },
                },
              },
              "mapBounds": Object {
                "task": Object {
                  "bounds": Array [
                    0,
                    0,
                    0,
                    0,
                  ],
                },
              },
              "saveTask": [Function],
              "setComment": [Function],
              "setTaskBeingCompleted": [Function],
              "task": Object {
                "id": 123,
                "parent": Object {
                  "id": 321,
                },
              },
              "unsaveTask": [Function],
              "user": Object {
                "id": 357,
                "isLoggedIn": true,
                "settings": Object {
                  "defaultEditor": 1,
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TaskCommentInput
            activateKeyboardShortcuts={[Function]}
            className="task-edit-controls__task-comment"
            comment="Foo"
            commentChanged={[Function]}
            completeTask={[Function]}
            deactivateKeyboardShortcuts={[Function]}
            editTask={[Function]}
            intl={
                        Object {
                                    "formatMessage": [Function],
                                  }
            }
            keyboardShortcutGroups={
                        Object {
                                    "taskCompletion": Object {
                                      "cancel": Object {
                                        "key": "Escape",
                                        "keyLabel": "ESC",
                                        "label": "Cancel Editing",
                                      },
                                    },
                                    "taskEditing": Object {
                                      "editId": Object {
                                        "key": "e",
                                        "label": "Edit in Id",
                                      },
                                      "editJosm": Object {
                                        "key": "r",
                                        "label": "Edit in JOSM",
                                      },
                                      "editJosmLayer": Object {
                                        "key": "t",
                                        "label": "Edit in new JOSM layer",
                                      },
                                      "falsePositive": Object {
                                        "key": "q",
                                        "label": "Not an Issue",
                                      },
                                      "skip": Object {
                                        "key": "w",
                                        "label": "Skip",
                                      },
                                    },
                                  }
            }
            mapBounds={
                        Object {
                                    "task": Object {
                                      "bounds": Array [
                                        0,
                                        0,
                                        0,
                                        0,
                                      ],
                                    },
                                  }
            }
            saveTask={[Function]}
            setComment={[Function]}
            setTaskBeingCompleted={[Function]}
            task={
                        Object {
                                    "id": 123,
                                    "parent": Object {
                                      "id": 321,
                                    },
                                  }
            }
            unsaveTask={[Function]}
            user={
                        Object {
                                    "id": 357,
                                    "isLoggedIn": true,
                                    "settings": Object {
                                      "defaultEditor": 1,
                                    },
                                  }
            }
            value="Foo"
/>,
          <div
            className="task-edit-controls__control-block"
>
            <button
                        className="button task-edit-controls__edit-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="edit-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Fix"
                                                id="Task.controls.fix.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <button
                        className="button task-edit-controls__false-positive-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <button
                        className="button task-edit-controls__skip-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <TaskSaveControls
                        activateKeyboardShortcuts={[Function]}
                        comment="Foo"
                        completeTask={[Function]}
                        deactivateKeyboardShortcuts={[Function]}
                        editTask={[Function]}
                        intl={
                                    Object {
                                                "formatMessage": [Function],
                                              }
                        }
                        keyboardShortcutGroups={
                                    Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                        }
                        mapBounds={
                                    Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                        }
                        saveTask={[Function]}
                        setComment={[Function]}
                        setTaskBeingCompleted={[Function]}
                        task={
                                    Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                        }
                        unsaveTask={[Function]}
                        user={
                                    Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {
                                                  "defaultEditor": 1,
                                                },
                                              }
                        }
            />
</div>,
        ],
        "className": "task-edit-controls",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activateKeyboardShortcuts": [Function],
            "className": "task-edit-controls__task-comment",
            "comment": "Foo",
            "commentChanged": [Function],
            "completeTask": [Function],
            "deactivateKeyboardShortcuts": [Function],
            "editTask": [Function],
            "intl": Object {
              "formatMessage": [Function],
            },
            "keyboardShortcutGroups": Object {
              "taskCompletion": Object {
                "cancel": Object {
                  "key": "Escape",
                  "keyLabel": "ESC",
                  "label": "Cancel Editing",
                },
              },
              "taskEditing": Object {
                "editId": Object {
                  "key": "e",
                  "label": "Edit in Id",
                },
                "editJosm": Object {
                  "key": "r",
                  "label": "Edit in JOSM",
                },
                "editJosmLayer": Object {
                  "key": "t",
                  "label": "Edit in new JOSM layer",
                },
                "falsePositive": Object {
                  "key": "q",
                  "label": "Not an Issue",
                },
                "skip": Object {
                  "key": "w",
                  "label": "Skip",
                },
              },
            },
            "mapBounds": Object {
              "task": Object {
                "bounds": Array [
                  0,
                  0,
                  0,
                  0,
                ],
              },
            },
            "saveTask": [Function],
            "setComment": [Function],
            "setTaskBeingCompleted": [Function],
            "task": Object {
              "id": 123,
              "parent": Object {
                "id": 321,
              },
            },
            "unsaveTask": [Function],
            "user": Object {
              "id": 357,
              "isLoggedIn": true,
              "settings": Object {
                "defaultEditor": 1,
              },
            },
            "value": "Foo",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="button task-edit-controls__edit-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="edit-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Fix"
                                                id="Task.controls.fix.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <button
                className="button task-edit-controls__false-positive-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <button
                className="button task-edit-controls__skip-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <TaskSaveControls
                activateKeyboardShortcuts={[Function]}
                comment="Foo"
                completeTask={[Function]}
                deactivateKeyboardShortcuts={[Function]}
                editTask={[Function]}
                intl={
                                Object {
                                                "formatMessage": [Function],
                                              }
                }
                keyboardShortcutGroups={
                                Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                }
                mapBounds={
                                Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                }
                saveTask={[Function]}
                setComment={[Function]}
                setTaskBeingCompleted={[Function]}
                task={
                                Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                }
                unsaveTask={[Function]}
                user={
                                Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {
                                                  "defaultEditor": 1,
                                                },
                                              }
                }
/>,
            ],
            "className": "task-edit-controls__control-block",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="edit-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Fix"
                                        id="Task.controls.fix.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__edit-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="edit-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "edit-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Fix"
                      id="Task.controls.fix.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Fix",
                      "id": "Task.controls.fix.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__false-positive-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="check-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "check-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Not an Issue"
                      id="Task.controls.falsePositive.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Not an Issue",
                      "id": "Task.controls.falsePositive.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__skip-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="skip-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "skip-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Skip"
                      id="Task.controls.skip.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Skip",
                      "id": "Task.controls.skip.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activateKeyboardShortcuts": [Function],
                "comment": "Foo",
                "completeTask": [Function],
                "deactivateKeyboardShortcuts": [Function],
                "editTask": [Function],
                "intl": Object {
                  "formatMessage": [Function],
                },
                "keyboardShortcutGroups": Object {
                  "taskCompletion": Object {
                    "cancel": Object {
                      "key": "Escape",
                      "keyLabel": "ESC",
                      "label": "Cancel Editing",
                    },
                  },
                  "taskEditing": Object {
                    "editId": Object {
                      "key": "e",
                      "label": "Edit in Id",
                    },
                    "editJosm": Object {
                      "key": "r",
                      "label": "Edit in JOSM",
                    },
                    "editJosmLayer": Object {
                      "key": "t",
                      "label": "Edit in new JOSM layer",
                    },
                    "falsePositive": Object {
                      "key": "q",
                      "label": "Not an Issue",
                    },
                    "skip": Object {
                      "key": "w",
                      "label": "Skip",
                    },
                  },
                },
                "mapBounds": Object {
                  "task": Object {
                    "bounds": Array [
                      0,
                      0,
                      0,
                      0,
                    ],
                  },
                },
                "saveTask": [Function],
                "setComment": [Function],
                "setTaskBeingCompleted": [Function],
                "task": Object {
                  "id": 123,
                  "parent": Object {
                    "id": 321,
                  },
                },
                "unsaveTask": [Function],
                "user": Object {
                  "id": 357,
                  "isLoggedIn": true,
                  "settings": Object {
                    "defaultEditor": 1,
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows edit controls if user is logged in 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControls
    activateKeyboardShortcuts={[Function]}
    comment="Foo"
    completeTask={[Function]}
    deactivateKeyboardShortcuts={[Function]}
    editTask={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          }
    }
    mapBounds={
        Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          }
    }
    saveTask={[Function]}
    setComment={[Function]}
    setTaskBeingCompleted={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          }
    }
    unsaveTask={[Function]}
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TaskCommentInput
          activateKeyboardShortcuts={[Function]}
          className="task-edit-controls__task-comment"
          comment="Foo"
          commentChanged={[Function]}
          completeTask={[Function]}
          deactivateKeyboardShortcuts={[Function]}
          editTask={[Function]}
          intl={
                    Object {
                              "formatMessage": [Function],
                            }
          }
          keyboardShortcutGroups={
                    Object {
                              "taskCompletion": Object {
                                "cancel": Object {
                                  "key": "Escape",
                                  "keyLabel": "ESC",
                                  "label": "Cancel Editing",
                                },
                              },
                              "taskEditing": Object {
                                "editId": Object {
                                  "key": "e",
                                  "label": "Edit in Id",
                                },
                                "editJosm": Object {
                                  "key": "r",
                                  "label": "Edit in JOSM",
                                },
                                "editJosmLayer": Object {
                                  "key": "t",
                                  "label": "Edit in new JOSM layer",
                                },
                                "falsePositive": Object {
                                  "key": "q",
                                  "label": "Not an Issue",
                                },
                                "skip": Object {
                                  "key": "w",
                                  "label": "Skip",
                                },
                              },
                            }
          }
          mapBounds={
                    Object {
                              "task": Object {
                                "bounds": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                              },
                            }
          }
          saveTask={[Function]}
          setComment={[Function]}
          setTaskBeingCompleted={[Function]}
          task={
                    Object {
                              "id": 123,
                              "parent": Object {
                                "id": 321,
                              },
                            }
          }
          unsaveTask={[Function]}
          user={
                    Object {
                              "id": 357,
                              "isLoggedIn": true,
                              "settings": Object {
                                "defaultEditor": 1,
                              },
                            }
          }
          value="Foo"
/>,
        <div
          className="task-edit-controls__control-block"
>
          <button
                    className="button task-edit-controls__edit-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="edit-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Fix"
                                        id="Task.controls.fix.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <button
                    className="button task-edit-controls__false-positive-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <button
                    className="button task-edit-controls__skip-control large-and-wide"
                    onClick={[Function]}
          >
                    <span
                              className="control-icon"
                              title={undefined}
                    >
                              <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                              />
                    </span>
                    <span
                              className="control-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                              />
                    </span>
          </button>
          <TaskSaveControls
                    activateKeyboardShortcuts={[Function]}
                    comment="Foo"
                    completeTask={[Function]}
                    deactivateKeyboardShortcuts={[Function]}
                    editTask={[Function]}
                    intl={
                              Object {
                                        "formatMessage": [Function],
                                      }
                    }
                    keyboardShortcutGroups={
                              Object {
                                        "taskCompletion": Object {
                                          "cancel": Object {
                                            "key": "Escape",
                                            "keyLabel": "ESC",
                                            "label": "Cancel Editing",
                                          },
                                        },
                                        "taskEditing": Object {
                                          "editId": Object {
                                            "key": "e",
                                            "label": "Edit in Id",
                                          },
                                          "editJosm": Object {
                                            "key": "r",
                                            "label": "Edit in JOSM",
                                          },
                                          "editJosmLayer": Object {
                                            "key": "t",
                                            "label": "Edit in new JOSM layer",
                                          },
                                          "falsePositive": Object {
                                            "key": "q",
                                            "label": "Not an Issue",
                                          },
                                          "skip": Object {
                                            "key": "w",
                                            "label": "Skip",
                                          },
                                        },
                                      }
                    }
                    mapBounds={
                              Object {
                                        "task": Object {
                                          "bounds": Array [
                                            0,
                                            0,
                                            0,
                                            0,
                                          ],
                                        },
                                      }
                    }
                    saveTask={[Function]}
                    setComment={[Function]}
                    setTaskBeingCompleted={[Function]}
                    task={
                              Object {
                                        "id": 123,
                                        "parent": Object {
                                          "id": 321,
                                        },
                                      }
                    }
                    unsaveTask={[Function]}
                    user={
                              Object {
                                        "id": 357,
                                        "isLoggedIn": true,
                                        "settings": Object {
                                          "defaultEditor": 1,
                                        },
                                      }
                    }
          />
</div>,
      ],
      "className": "task-edit-controls",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activateKeyboardShortcuts": [Function],
          "className": "task-edit-controls__task-comment",
          "comment": "Foo",
          "commentChanged": [Function],
          "completeTask": [Function],
          "deactivateKeyboardShortcuts": [Function],
          "editTask": [Function],
          "intl": Object {
            "formatMessage": [Function],
          },
          "keyboardShortcutGroups": Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          },
          "mapBounds": Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          },
          "saveTask": [Function],
          "setComment": [Function],
          "setTaskBeingCompleted": [Function],
          "task": Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          },
          "unsaveTask": [Function],
          "user": Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          },
          "value": "Foo",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="button task-edit-controls__edit-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="edit-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Fix"
                                          id="Task.controls.fix.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <button
              className="button task-edit-controls__false-positive-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="check-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Not an Issue"
                                          id="Task.controls.falsePositive.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <button
              className="button task-edit-controls__skip-control large-and-wide"
              onClick={[Function]}
>
              <span
                            className="control-icon"
                            title={undefined}
              >
                            <SvgSymbol
                                          sym="skip-icon"
                                          viewBox="0 0 20 20"
                            />
              </span>
              <span
                            className="control-label"
              >
                            <FormattedMessage
                                          defaultMessage="Skip"
                                          id="Task.controls.skip.label"
                                          values={Object {}}
                            />
              </span>
</button>,
            <TaskSaveControls
              activateKeyboardShortcuts={[Function]}
              comment="Foo"
              completeTask={[Function]}
              deactivateKeyboardShortcuts={[Function]}
              editTask={[Function]}
              intl={
                            Object {
                                          "formatMessage": [Function],
                                        }
              }
              keyboardShortcutGroups={
                            Object {
                                          "taskCompletion": Object {
                                            "cancel": Object {
                                              "key": "Escape",
                                              "keyLabel": "ESC",
                                              "label": "Cancel Editing",
                                            },
                                          },
                                          "taskEditing": Object {
                                            "editId": Object {
                                              "key": "e",
                                              "label": "Edit in Id",
                                            },
                                            "editJosm": Object {
                                              "key": "r",
                                              "label": "Edit in JOSM",
                                            },
                                            "editJosmLayer": Object {
                                              "key": "t",
                                              "label": "Edit in new JOSM layer",
                                            },
                                            "falsePositive": Object {
                                              "key": "q",
                                              "label": "Not an Issue",
                                            },
                                            "skip": Object {
                                              "key": "w",
                                              "label": "Skip",
                                            },
                                          },
                                        }
              }
              mapBounds={
                            Object {
                                          "task": Object {
                                            "bounds": Array [
                                              0,
                                              0,
                                              0,
                                              0,
                                            ],
                                          },
                                        }
              }
              saveTask={[Function]}
              setComment={[Function]}
              setTaskBeingCompleted={[Function]}
              task={
                            Object {
                                          "id": 123,
                                          "parent": Object {
                                            "id": 321,
                                          },
                                        }
              }
              unsaveTask={[Function]}
              user={
                            Object {
                                          "id": 357,
                                          "isLoggedIn": true,
                                          "settings": Object {
                                            "defaultEditor": 1,
                                          },
                                        }
              }
/>,
          ],
          "className": "task-edit-controls__control-block",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="edit-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Fix"
                                    id="Task.controls.fix.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__edit-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="edit-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "edit-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Fix"
                    id="Task.controls.fix.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Fix",
                    "id": "Task.controls.fix.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="check-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Not an Issue"
                                    id="Task.controls.falsePositive.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__false-positive-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="check-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "check-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Not an Issue"
                    id="Task.controls.falsePositive.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Not an Issue",
                    "id": "Task.controls.falsePositive.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="control-icon"
                  title={undefined}
>
                  <SvgSymbol
                                    sym="skip-icon"
                                    viewBox="0 0 20 20"
                  />
</span>,
                <span
                  className="control-label"
>
                  <FormattedMessage
                                    defaultMessage="Skip"
                                    id="Task.controls.skip.label"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "button task-edit-controls__skip-control large-and-wide",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SvgSymbol
                    sym="skip-icon"
                    viewBox="0 0 20 20"
/>,
                  "className": "control-icon",
                  "title": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "sym": "skip-icon",
                    "viewBox": "0 0 20 20",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Skip"
                    id="Task.controls.skip.label"
                    values={Object {}}
/>,
                  "className": "control-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Skip",
                    "id": "Task.controls.skip.label",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activateKeyboardShortcuts": [Function],
              "comment": "Foo",
              "completeTask": [Function],
              "deactivateKeyboardShortcuts": [Function],
              "editTask": [Function],
              "intl": Object {
                "formatMessage": [Function],
              },
              "keyboardShortcutGroups": Object {
                "taskCompletion": Object {
                  "cancel": Object {
                    "key": "Escape",
                    "keyLabel": "ESC",
                    "label": "Cancel Editing",
                  },
                },
                "taskEditing": Object {
                  "editId": Object {
                    "key": "e",
                    "label": "Edit in Id",
                  },
                  "editJosm": Object {
                    "key": "r",
                    "label": "Edit in JOSM",
                  },
                  "editJosmLayer": Object {
                    "key": "t",
                    "label": "Edit in new JOSM layer",
                  },
                  "falsePositive": Object {
                    "key": "q",
                    "label": "Not an Issue",
                  },
                  "skip": Object {
                    "key": "w",
                    "label": "Skip",
                  },
                },
              },
              "mapBounds": Object {
                "task": Object {
                  "bounds": Array [
                    0,
                    0,
                    0,
                    0,
                  ],
                },
              },
              "saveTask": [Function],
              "setComment": [Function],
              "setTaskBeingCompleted": [Function],
              "task": Object {
                "id": 123,
                "parent": Object {
                  "id": 321,
                },
              },
              "unsaveTask": [Function],
              "user": Object {
                "id": 357,
                "isLoggedIn": true,
                "settings": Object {
                  "defaultEditor": 1,
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TaskCommentInput
            activateKeyboardShortcuts={[Function]}
            className="task-edit-controls__task-comment"
            comment="Foo"
            commentChanged={[Function]}
            completeTask={[Function]}
            deactivateKeyboardShortcuts={[Function]}
            editTask={[Function]}
            intl={
                        Object {
                                    "formatMessage": [Function],
                                  }
            }
            keyboardShortcutGroups={
                        Object {
                                    "taskCompletion": Object {
                                      "cancel": Object {
                                        "key": "Escape",
                                        "keyLabel": "ESC",
                                        "label": "Cancel Editing",
                                      },
                                    },
                                    "taskEditing": Object {
                                      "editId": Object {
                                        "key": "e",
                                        "label": "Edit in Id",
                                      },
                                      "editJosm": Object {
                                        "key": "r",
                                        "label": "Edit in JOSM",
                                      },
                                      "editJosmLayer": Object {
                                        "key": "t",
                                        "label": "Edit in new JOSM layer",
                                      },
                                      "falsePositive": Object {
                                        "key": "q",
                                        "label": "Not an Issue",
                                      },
                                      "skip": Object {
                                        "key": "w",
                                        "label": "Skip",
                                      },
                                    },
                                  }
            }
            mapBounds={
                        Object {
                                    "task": Object {
                                      "bounds": Array [
                                        0,
                                        0,
                                        0,
                                        0,
                                      ],
                                    },
                                  }
            }
            saveTask={[Function]}
            setComment={[Function]}
            setTaskBeingCompleted={[Function]}
            task={
                        Object {
                                    "id": 123,
                                    "parent": Object {
                                      "id": 321,
                                    },
                                  }
            }
            unsaveTask={[Function]}
            user={
                        Object {
                                    "id": 357,
                                    "isLoggedIn": true,
                                    "settings": Object {
                                      "defaultEditor": 1,
                                    },
                                  }
            }
            value="Foo"
/>,
          <div
            className="task-edit-controls__control-block"
>
            <button
                        className="button task-edit-controls__edit-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="edit-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Fix"
                                                id="Task.controls.fix.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <button
                        className="button task-edit-controls__false-positive-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <button
                        className="button task-edit-controls__skip-control large-and-wide"
                        onClick={[Function]}
            >
                        <span
                                    className="control-icon"
                                    title={undefined}
                        >
                                    <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                    />
                        </span>
                        <span
                                    className="control-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                    />
                        </span>
            </button>
            <TaskSaveControls
                        activateKeyboardShortcuts={[Function]}
                        comment="Foo"
                        completeTask={[Function]}
                        deactivateKeyboardShortcuts={[Function]}
                        editTask={[Function]}
                        intl={
                                    Object {
                                                "formatMessage": [Function],
                                              }
                        }
                        keyboardShortcutGroups={
                                    Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                        }
                        mapBounds={
                                    Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                        }
                        saveTask={[Function]}
                        setComment={[Function]}
                        setTaskBeingCompleted={[Function]}
                        task={
                                    Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                        }
                        unsaveTask={[Function]}
                        user={
                                    Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {
                                                  "defaultEditor": 1,
                                                },
                                              }
                        }
            />
</div>,
        ],
        "className": "task-edit-controls",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activateKeyboardShortcuts": [Function],
            "className": "task-edit-controls__task-comment",
            "comment": "Foo",
            "commentChanged": [Function],
            "completeTask": [Function],
            "deactivateKeyboardShortcuts": [Function],
            "editTask": [Function],
            "intl": Object {
              "formatMessage": [Function],
            },
            "keyboardShortcutGroups": Object {
              "taskCompletion": Object {
                "cancel": Object {
                  "key": "Escape",
                  "keyLabel": "ESC",
                  "label": "Cancel Editing",
                },
              },
              "taskEditing": Object {
                "editId": Object {
                  "key": "e",
                  "label": "Edit in Id",
                },
                "editJosm": Object {
                  "key": "r",
                  "label": "Edit in JOSM",
                },
                "editJosmLayer": Object {
                  "key": "t",
                  "label": "Edit in new JOSM layer",
                },
                "falsePositive": Object {
                  "key": "q",
                  "label": "Not an Issue",
                },
                "skip": Object {
                  "key": "w",
                  "label": "Skip",
                },
              },
            },
            "mapBounds": Object {
              "task": Object {
                "bounds": Array [
                  0,
                  0,
                  0,
                  0,
                ],
              },
            },
            "saveTask": [Function],
            "setComment": [Function],
            "setTaskBeingCompleted": [Function],
            "task": Object {
              "id": 123,
              "parent": Object {
                "id": 321,
              },
            },
            "unsaveTask": [Function],
            "user": Object {
              "id": 357,
              "isLoggedIn": true,
              "settings": Object {
                "defaultEditor": 1,
              },
            },
            "value": "Foo",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="button task-edit-controls__edit-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="edit-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Fix"
                                                id="Task.controls.fix.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <button
                className="button task-edit-controls__false-positive-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="check-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Not an Issue"
                                                id="Task.controls.falsePositive.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <button
                className="button task-edit-controls__skip-control large-and-wide"
                onClick={[Function]}
>
                <span
                                className="control-icon"
                                title={undefined}
                >
                                <SvgSymbol
                                                sym="skip-icon"
                                                viewBox="0 0 20 20"
                                />
                </span>
                <span
                                className="control-label"
                >
                                <FormattedMessage
                                                defaultMessage="Skip"
                                                id="Task.controls.skip.label"
                                                values={Object {}}
                                />
                </span>
</button>,
              <TaskSaveControls
                activateKeyboardShortcuts={[Function]}
                comment="Foo"
                completeTask={[Function]}
                deactivateKeyboardShortcuts={[Function]}
                editTask={[Function]}
                intl={
                                Object {
                                                "formatMessage": [Function],
                                              }
                }
                keyboardShortcutGroups={
                                Object {
                                                "taskCompletion": Object {
                                                  "cancel": Object {
                                                    "key": "Escape",
                                                    "keyLabel": "ESC",
                                                    "label": "Cancel Editing",
                                                  },
                                                },
                                                "taskEditing": Object {
                                                  "editId": Object {
                                                    "key": "e",
                                                    "label": "Edit in Id",
                                                  },
                                                  "editJosm": Object {
                                                    "key": "r",
                                                    "label": "Edit in JOSM",
                                                  },
                                                  "editJosmLayer": Object {
                                                    "key": "t",
                                                    "label": "Edit in new JOSM layer",
                                                  },
                                                  "falsePositive": Object {
                                                    "key": "q",
                                                    "label": "Not an Issue",
                                                  },
                                                  "skip": Object {
                                                    "key": "w",
                                                    "label": "Skip",
                                                  },
                                                },
                                              }
                }
                mapBounds={
                                Object {
                                                "task": Object {
                                                  "bounds": Array [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                  ],
                                                },
                                              }
                }
                saveTask={[Function]}
                setComment={[Function]}
                setTaskBeingCompleted={[Function]}
                task={
                                Object {
                                                "id": 123,
                                                "parent": Object {
                                                  "id": 321,
                                                },
                                              }
                }
                unsaveTask={[Function]}
                user={
                                Object {
                                                "id": 357,
                                                "isLoggedIn": true,
                                                "settings": Object {
                                                  "defaultEditor": 1,
                                                },
                                              }
                }
/>,
            ],
            "className": "task-edit-controls__control-block",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="edit-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Fix"
                                        id="Task.controls.fix.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__edit-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="edit-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "edit-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Fix"
                      id="Task.controls.fix.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Fix",
                      "id": "Task.controls.fix.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="check-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Not an Issue"
                                        id="Task.controls.falsePositive.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__false-positive-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="check-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "check-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Not an Issue"
                      id="Task.controls.falsePositive.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Not an Issue",
                      "id": "Task.controls.falsePositive.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="control-icon"
                    title={undefined}
>
                    <SvgSymbol
                                        sym="skip-icon"
                                        viewBox="0 0 20 20"
                    />
</span>,
                  <span
                    className="control-label"
>
                    <FormattedMessage
                                        defaultMessage="Skip"
                                        id="Task.controls.skip.label"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "button task-edit-controls__skip-control large-and-wide",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SvgSymbol
                      sym="skip-icon"
                      viewBox="0 0 20 20"
/>,
                    "className": "control-icon",
                    "title": undefined,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "sym": "skip-icon",
                      "viewBox": "0 0 20 20",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Skip"
                      id="Task.controls.skip.label"
                      values={Object {}}
/>,
                    "className": "control-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Skip",
                      "id": "Task.controls.skip.label",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activateKeyboardShortcuts": [Function],
                "comment": "Foo",
                "completeTask": [Function],
                "deactivateKeyboardShortcuts": [Function],
                "editTask": [Function],
                "intl": Object {
                  "formatMessage": [Function],
                },
                "keyboardShortcutGroups": Object {
                  "taskCompletion": Object {
                    "cancel": Object {
                      "key": "Escape",
                      "keyLabel": "ESC",
                      "label": "Cancel Editing",
                    },
                  },
                  "taskEditing": Object {
                    "editId": Object {
                      "key": "e",
                      "label": "Edit in Id",
                    },
                    "editJosm": Object {
                      "key": "r",
                      "label": "Edit in JOSM",
                    },
                    "editJosmLayer": Object {
                      "key": "t",
                      "label": "Edit in new JOSM layer",
                    },
                    "falsePositive": Object {
                      "key": "q",
                      "label": "Not an Issue",
                    },
                    "skip": Object {
                      "key": "w",
                      "label": "Skip",
                    },
                  },
                },
                "mapBounds": Object {
                  "task": Object {
                    "bounds": Array [
                      0,
                      0,
                      0,
                      0,
                    ],
                  },
                },
                "saveTask": [Function],
                "setComment": [Function],
                "setTaskBeingCompleted": [Function],
                "task": Object {
                  "id": 123,
                  "parent": Object {
                    "id": 321,
                  },
                },
                "unsaveTask": [Function],
                "user": Object {
                  "id": 357,
                  "isLoggedIn": true,
                  "settings": Object {
                    "defaultEditor": 1,
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows only a sign-in button if the user is not logged in 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControls
    activateKeyboardShortcuts={[Function]}
    comment="Foo"
    completeTask={[Function]}
    deactivateKeyboardShortcuts={[Function]}
    editTask={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          }
    }
    mapBounds={
        Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          }
    }
    saveTask={[Function]}
    setComment={[Function]}
    setTaskBeingCompleted={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          }
    }
    unsaveTask={[Function]}
    user={
        Object {
            "id": 357,
            "isLoggedIn": false,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="has-centered-children"
>
        <Connect(SignInButton)
                activateKeyboardShortcuts={[Function]}
                className="task-edit-controls--signin"
                comment="Foo"
                completeTask={[Function]}
                deactivateKeyboardShortcuts={[Function]}
                editTask={[Function]}
                intl={
                        Object {
                                "formatMessage": [Function],
                              }
                }
                keyboardShortcutGroups={
                        Object {
                                "taskCompletion": Object {
                                  "cancel": Object {
                                    "key": "Escape",
                                    "keyLabel": "ESC",
                                    "label": "Cancel Editing",
                                  },
                                },
                                "taskEditing": Object {
                                  "editId": Object {
                                    "key": "e",
                                    "label": "Edit in Id",
                                  },
                                  "editJosm": Object {
                                    "key": "r",
                                    "label": "Edit in JOSM",
                                  },
                                  "editJosmLayer": Object {
                                    "key": "t",
                                    "label": "Edit in new JOSM layer",
                                  },
                                  "falsePositive": Object {
                                    "key": "q",
                                    "label": "Not an Issue",
                                  },
                                  "skip": Object {
                                    "key": "w",
                                    "label": "Skip",
                                  },
                                },
                              }
                }
                mapBounds={
                        Object {
                                "task": Object {
                                  "bounds": Array [
                                    0,
                                    0,
                                    0,
                                    0,
                                  ],
                                },
                              }
                }
                saveTask={[Function]}
                setComment={[Function]}
                setTaskBeingCompleted={[Function]}
                task={
                        Object {
                                "id": 123,
                                "parent": Object {
                                  "id": 321,
                                },
                              }
                }
                unsaveTask={[Function]}
                user={
                        Object {
                                "id": 357,
                                "isLoggedIn": false,
                                "settings": Object {
                                  "defaultEditor": 1,
                                },
                              }
                }
        />
</div>,
      "className": "task-edit-controls",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Connect(SignInButton)
          activateKeyboardShortcuts={[Function]}
          className="task-edit-controls--signin"
          comment="Foo"
          completeTask={[Function]}
          deactivateKeyboardShortcuts={[Function]}
          editTask={[Function]}
          intl={
                    Object {
                              "formatMessage": [Function],
                            }
          }
          keyboardShortcutGroups={
                    Object {
                              "taskCompletion": Object {
                                "cancel": Object {
                                  "key": "Escape",
                                  "keyLabel": "ESC",
                                  "label": "Cancel Editing",
                                },
                              },
                              "taskEditing": Object {
                                "editId": Object {
                                  "key": "e",
                                  "label": "Edit in Id",
                                },
                                "editJosm": Object {
                                  "key": "r",
                                  "label": "Edit in JOSM",
                                },
                                "editJosmLayer": Object {
                                  "key": "t",
                                  "label": "Edit in new JOSM layer",
                                },
                                "falsePositive": Object {
                                  "key": "q",
                                  "label": "Not an Issue",
                                },
                                "skip": Object {
                                  "key": "w",
                                  "label": "Skip",
                                },
                              },
                            }
          }
          mapBounds={
                    Object {
                              "task": Object {
                                "bounds": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                              },
                            }
          }
          saveTask={[Function]}
          setComment={[Function]}
          setTaskBeingCompleted={[Function]}
          task={
                    Object {
                              "id": 123,
                              "parent": Object {
                                "id": 321,
                              },
                            }
          }
          unsaveTask={[Function]}
          user={
                    Object {
                              "id": 357,
                              "isLoggedIn": false,
                              "settings": Object {
                                "defaultEditor": 1,
                              },
                            }
          }
/>,
        "className": "has-centered-children",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activateKeyboardShortcuts": [Function],
          "className": "task-edit-controls--signin",
          "comment": "Foo",
          "completeTask": [Function],
          "deactivateKeyboardShortcuts": [Function],
          "editTask": [Function],
          "intl": Object {
            "formatMessage": [Function],
          },
          "keyboardShortcutGroups": Object {
            "taskCompletion": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
            "taskEditing": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
          },
          "mapBounds": Object {
            "task": Object {
              "bounds": Array [
                0,
                0,
                0,
                0,
              ],
            },
          },
          "saveTask": [Function],
          "setComment": [Function],
          "setTaskBeingCompleted": [Function],
          "task": Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
          },
          "unsaveTask": [Function],
          "user": Object {
            "id": 357,
            "isLoggedIn": false,
            "settings": Object {
              "defaultEditor": 1,
            },
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="has-centered-children"
>
          <Connect(SignInButton)
                    activateKeyboardShortcuts={[Function]}
                    className="task-edit-controls--signin"
                    comment="Foo"
                    completeTask={[Function]}
                    deactivateKeyboardShortcuts={[Function]}
                    editTask={[Function]}
                    intl={
                              Object {
                                        "formatMessage": [Function],
                                      }
                    }
                    keyboardShortcutGroups={
                              Object {
                                        "taskCompletion": Object {
                                          "cancel": Object {
                                            "key": "Escape",
                                            "keyLabel": "ESC",
                                            "label": "Cancel Editing",
                                          },
                                        },
                                        "taskEditing": Object {
                                          "editId": Object {
                                            "key": "e",
                                            "label": "Edit in Id",
                                          },
                                          "editJosm": Object {
                                            "key": "r",
                                            "label": "Edit in JOSM",
                                          },
                                          "editJosmLayer": Object {
                                            "key": "t",
                                            "label": "Edit in new JOSM layer",
                                          },
                                          "falsePositive": Object {
                                            "key": "q",
                                            "label": "Not an Issue",
                                          },
                                          "skip": Object {
                                            "key": "w",
                                            "label": "Skip",
                                          },
                                        },
                                      }
                    }
                    mapBounds={
                              Object {
                                        "task": Object {
                                          "bounds": Array [
                                            0,
                                            0,
                                            0,
                                            0,
                                          ],
                                        },
                                      }
                    }
                    saveTask={[Function]}
                    setComment={[Function]}
                    setTaskBeingCompleted={[Function]}
                    task={
                              Object {
                                        "id": 123,
                                        "parent": Object {
                                          "id": 321,
                                        },
                                      }
                    }
                    unsaveTask={[Function]}
                    user={
                              Object {
                                        "id": 357,
                                        "isLoggedIn": false,
                                        "settings": Object {
                                          "defaultEditor": 1,
                                        },
                                      }
                    }
          />
</div>,
        "className": "task-edit-controls",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Connect(SignInButton)
            activateKeyboardShortcuts={[Function]}
            className="task-edit-controls--signin"
            comment="Foo"
            completeTask={[Function]}
            deactivateKeyboardShortcuts={[Function]}
            editTask={[Function]}
            intl={
                        Object {
                                    "formatMessage": [Function],
                                  }
            }
            keyboardShortcutGroups={
                        Object {
                                    "taskCompletion": Object {
                                      "cancel": Object {
                                        "key": "Escape",
                                        "keyLabel": "ESC",
                                        "label": "Cancel Editing",
                                      },
                                    },
                                    "taskEditing": Object {
                                      "editId": Object {
                                        "key": "e",
                                        "label": "Edit in Id",
                                      },
                                      "editJosm": Object {
                                        "key": "r",
                                        "label": "Edit in JOSM",
                                      },
                                      "editJosmLayer": Object {
                                        "key": "t",
                                        "label": "Edit in new JOSM layer",
                                      },
                                      "falsePositive": Object {
                                        "key": "q",
                                        "label": "Not an Issue",
                                      },
                                      "skip": Object {
                                        "key": "w",
                                        "label": "Skip",
                                      },
                                    },
                                  }
            }
            mapBounds={
                        Object {
                                    "task": Object {
                                      "bounds": Array [
                                        0,
                                        0,
                                        0,
                                        0,
                                      ],
                                    },
                                  }
            }
            saveTask={[Function]}
            setComment={[Function]}
            setTaskBeingCompleted={[Function]}
            task={
                        Object {
                                    "id": 123,
                                    "parent": Object {
                                      "id": 321,
                                    },
                                  }
            }
            unsaveTask={[Function]}
            user={
                        Object {
                                    "id": 357,
                                    "isLoggedIn": false,
                                    "settings": Object {
                                      "defaultEditor": 1,
                                    },
                                  }
            }
/>,
          "className": "has-centered-children",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activateKeyboardShortcuts": [Function],
            "className": "task-edit-controls--signin",
            "comment": "Foo",
            "completeTask": [Function],
            "deactivateKeyboardShortcuts": [Function],
            "editTask": [Function],
            "intl": Object {
              "formatMessage": [Function],
            },
            "keyboardShortcutGroups": Object {
              "taskCompletion": Object {
                "cancel": Object {
                  "key": "Escape",
                  "keyLabel": "ESC",
                  "label": "Cancel Editing",
                },
              },
              "taskEditing": Object {
                "editId": Object {
                  "key": "e",
                  "label": "Edit in Id",
                },
                "editJosm": Object {
                  "key": "r",
                  "label": "Edit in JOSM",
                },
                "editJosmLayer": Object {
                  "key": "t",
                  "label": "Edit in new JOSM layer",
                },
                "falsePositive": Object {
                  "key": "q",
                  "label": "Not an Issue",
                },
                "skip": Object {
                  "key": "w",
                  "label": "Skip",
                },
              },
            },
            "mapBounds": Object {
              "task": Object {
                "bounds": Array [
                  0,
                  0,
                  0,
                  0,
                ],
              },
            },
            "saveTask": [Function],
            "setComment": [Function],
            "setTaskBeingCompleted": [Function],
            "task": Object {
              "id": 123,
              "parent": Object {
                "id": 321,
              },
            },
            "unsaveTask": [Function],
            "user": Object {
              "id": 357,
              "isLoggedIn": false,
              "settings": Object {
                "defaultEditor": 1,
              },
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

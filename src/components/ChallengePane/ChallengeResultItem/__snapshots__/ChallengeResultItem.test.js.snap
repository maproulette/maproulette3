// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Save and Unsave toggles do not show if there is no user 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={null}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders featured challenges with a featured icon 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "featured": true,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="challenge-list__item--featured-indicator"
>
          <FormattedMessage
                    defaultMessage="Featured"
                    id="Task.status.featured.label"
                    values={Object {}}
          />
</div>,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "featured": true,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Save"
                                                  id="Challenge.save"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="Featured"
            id="Task.status.featured.label"
            values={Object {}}
/>,
          "className": "challenge-list__item--featured-indicator",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Featured",
            "id": "Task.status.featured.label",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "featured": true,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Save"
                                                        id="Challenge.save"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "featured": true,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Save"
                                                      id="Challenge.save"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Save"
                                        id="Challenge.save"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Save"
                      id="Challenge.save"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Save",
                      "id": "Challenge.save",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="challenge-list__item--featured-indicator"
>
            <FormattedMessage
                        defaultMessage="Featured"
                        id="Task.status.featured.label"
                        values={Object {}}
            />
</div>,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "featured": true,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Featured"
              id="Task.status.featured.label"
              values={Object {}}
/>,
            "className": "challenge-list__item--featured-indicator",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Featured",
              "id": "Task.status.featured.label",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "featured": true,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Save"
                                                                id="Challenge.save"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "featured": true,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Save"
                                            id="Challenge.save"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Save"
                        id="Challenge.save"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Save",
                        "id": "Challenge.save",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders with props as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Save"
                                                  id="Challenge.save"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Save"
                                                        id="Challenge.save"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Save"
                                                      id="Challenge.save"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Save"
                                        id="Challenge.save"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Save"
                      id="Challenge.save"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Save",
                      "id": "Challenge.save",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Save"
                                                                id="Challenge.save"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Save"
                                            id="Challenge.save"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Save"
                        id="Challenge.save"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Save",
                        "id": "Challenge.save",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`when clicked the challenge becomes active 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Save"
                                                  id="Challenge.save"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item is-active",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Save"
                                                        id="Challenge.save"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Save"
                                                      id="Challenge.save"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Save"
                                        id="Challenge.save"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Save"
                      id="Challenge.save"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Save",
                      "id": "Challenge.save",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item is-active",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Save"
                                                                id="Challenge.save"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Save"
                                            id="Challenge.save"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Save"
                        id="Challenge.save"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Save",
                        "id": "Challenge.save",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`when save challenge button is clicked saveChallenge is called 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Save"
                                                  id="Challenge.save"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Save"
                                                        id="Challenge.save"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Save"
                                                      id="Challenge.save"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Save"
                                        id="Challenge.save"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Save"
                      id="Challenge.save"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Save",
                      "id": "Challenge.save",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Save"
                                                                id="Challenge.save"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Save"
                                            id="Challenge.save"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Save"
                        id="Challenge.save"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Save",
                        "id": "Challenge.save",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`when start challenge button is clicked startChallenge is called 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              />
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge is-loading"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Save"
                                                  id="Challenge.save"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            />
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  />
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
/>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": null,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge is-loading"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Save"
                                                        id="Challenge.save"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge is-loading"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Save"
                                                      id="Challenge.save"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge is-loading"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge is-loading",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Save"
                                        id="Challenge.save"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Save"
                      id="Challenge.save"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Save",
                      "id": "Challenge.save",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    />
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge is-loading"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                />
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    />
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
/>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": null,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge is-loading"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Save"
                                                                id="Challenge.save"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge is-loading"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Save"
                                                            id="Challenge.save"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge is-loading"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge is-loading",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Save"
                                            id="Challenge.save"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Save"
                        id="Challenge.save"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Save",
                        "id": "Challenge.save",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`when unsave challenge button is clicked saveChallenge is called 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengeResultItem
    challenge={
        Object {
            "blurb": "Challenge 309 blurb",
            "description": "Challenge 309 description",
            "difficulty": 3,
            "id": 309,
            "name": "Challenge 309",
            "parent": Object {
              "displayName": "foo",
            },
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    saveChallenge={[Function]}
    startChallenge={[Function]}
    unsaveChallenge={[Function]}
    user={
        Object {
            "id": 11,
            "savedChallenges": Array [
              Object {
                "id": 309,
              },
            ],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <header
          className="card-header"
          onClick={[Function]}
>
          <div>
                    <div
                              className="challenge-list__item-title"
                    >
                              <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                              >
                                        <SvgSymbol
                                                  sym="heart-icon"
                                                  viewBox="0 0 20 20"
                                        />
                              </div>
                              <div
                                        className="challenge-list__item__name"
                              >
                                        Challenge 309
                              </div>
                    </div>
                    <div
                              className="challenge-list__item__project-name"
                    >
                              foo
                    </div>
          </div>
          <a
                    aria-label="more options"
                    className="card-header-icon"
          >
                    <span
                              className="icon"
                    />
          </a>
</header>,
        <div
          className="card-content"
>
          <div
                    className="challenge-list__item__difficulty"
          >
                    <span
                              className="challenge-list__item__field-label"
                    >
                              <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                              />
                    </span>
                    <span
                              className="challenge-list__item__field-value"
                    >
                              <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                              />
                    </span>
          </div>
          <div
                    className="challenge-list__item__blurb"
          >
                    <MarkdownContent
                              markdown="Challenge 309 blurb"
                    />
          </div>
          <ChallengeProgress
                    challenge={
                              Object {
                                        "blurb": "Challenge 309 blurb",
                                        "description": "Challenge 309 description",
                                        "difficulty": 3,
                                        "id": 309,
                                        "name": "Challenge 309",
                                        "parent": Object {
                                          "displayName": "foo",
                                        },
                                      }
                    }
          />
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Start"
                                                  id="Challenge.start"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                              >
                                        <FormattedMessage
                                                  defaultMessage="Unsave"
                                                  id="Challenge.unsave"
                                                  values={Object {}}
                                        />
                              </button>
                    </p>
          </div>
</div>,
      ],
      "className": "card challenge-list__item",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <div
                            className="challenge-list__item-title"
              >
                            <div
                                          className="challenge-list__item-indicator-icon saved"
                                          title={undefined}
                            >
                                          <SvgSymbol
                                                        sym="heart-icon"
                                                        viewBox="0 0 20 20"
                                          />
                            </div>
                            <div
                                          className="challenge-list__item__name"
                            >
                                          Challenge 309
                            </div>
              </div>
              <div
                            className="challenge-list__item__project-name"
              >
                            foo
              </div>
</div>,
            <a
              aria-label="more options"
              className="card-header-icon"
>
              <span
                            className="icon"
              />
</a>,
          ],
          "className": "card-header",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="challenge-list__item-title"
>
                  <div
                                    className="challenge-list__item-indicator-icon saved"
                                    title={undefined}
                  >
                                    <SvgSymbol
                                                      sym="heart-icon"
                                                      viewBox="0 0 20 20"
                                    />
                  </div>
                  <div
                                    className="challenge-list__item__name"
                  >
                                    Challenge 309
                  </div>
</div>,
                <div
                  className="challenge-list__item__project-name"
>
                  foo
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="challenge-list__item-indicator-icon saved"
                      title={undefined}
>
                      <SvgSymbol
                                            sym="heart-icon"
                                            viewBox="0 0 20 20"
                      />
</div>,
                    <div
                      className="challenge-list__item__name"
>
                      Challenge 309
</div>,
                  ],
                  "className": "challenge-list__item-title",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <SvgSymbol
                        sym="heart-icon"
                        viewBox="0 0 20 20"
/>,
                      "className": "challenge-list__item-indicator-icon saved",
                      "title": undefined,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "sym": "heart-icon",
                        "viewBox": "0 0 20 20",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Challenge 309",
                      "className": "challenge-list__item__name",
                    },
                    "ref": null,
                    "rendered": "Challenge 309",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "foo",
                  "className": "challenge-list__item__project-name",
                },
                "ref": null,
                "rendered": "foo",
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "more options",
              "children": <span
                className="icon"
/>,
              "className": "card-header-icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "a",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="challenge-list__item__difficulty"
>
              <span
                            className="challenge-list__item__field-label"
              >
                            <FormattedMessage
                                          defaultMessage="Difficulty"
                                          id="ChallengeResultList.difficultyLabel"
                                          values={Object {}}
                            />
              </span>
              <span
                            className="challenge-list__item__field-value"
              >
                            <FormattedMessage
                                          defaultMessage="Expert"
                                          id="Challenge.difficulty.expert"
                                          values={Object {}}
                            />
              </span>
</div>,
            <div
              className="challenge-list__item__blurb"
>
              <MarkdownContent
                            markdown="Challenge 309 blurb"
              />
</div>,
            <ChallengeProgress
              challenge={
                            Object {
                                          "blurb": "Challenge 309 blurb",
                                          "description": "Challenge 309 description",
                                          "difficulty": 3,
                                          "id": 309,
                                          "name": "Challenge 309",
                                          "parent": Object {
                                            "displayName": "foo",
                                          },
                                        }
              }
/>,
            <div
              className="field is-grouped"
>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined start-challenge"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Start"
                                                        id="Challenge.start"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-outlined save-challenge-toggle"
                                          onClick={[Function]}
                            >
                                          <FormattedMessage
                                                        defaultMessage="Unsave"
                                                        id="Challenge.unsave"
                                                        values={Object {}}
                                          />
                            </button>
              </p>
</div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="challenge-list__item__field-label"
>
                  <FormattedMessage
                                    defaultMessage="Difficulty"
                                    id="ChallengeResultList.difficultyLabel"
                                    values={Object {}}
                  />
</span>,
                <span
                  className="challenge-list__item__field-value"
>
                  <FormattedMessage
                                    defaultMessage="Expert"
                                    id="Challenge.difficulty.expert"
                                    values={Object {}}
                  />
</span>,
              ],
              "className": "challenge-list__item__difficulty",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Difficulty"
                    id="ChallengeResultList.difficultyLabel"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Difficulty",
                    "id": "ChallengeResultList.difficultyLabel",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Expert"
                    id="Challenge.difficulty.expert"
                    values={Object {}}
/>,
                  "className": "challenge-list__item__field-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Expert",
                    "id": "Challenge.difficulty.expert",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MarkdownContent
                markdown="Challenge 309 blurb"
/>,
              "className": "challenge-list__item__blurb",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "markdown": "Challenge 309 blurb",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "challenge": Object {
                "blurb": "Challenge 309 blurb",
                "description": "Challenge 309 description",
                "difficulty": 3,
                "id": 309,
                "name": "Challenge 309",
                "parent": Object {
                  "displayName": "foo",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined start-challenge"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Start"
                                                      id="Challenge.start"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
                null,
                <p
                  className="control"
>
                  <button
                                    className="button is-outlined save-challenge-toggle"
                                    onClick={[Function]}
                  >
                                    <FormattedMessage
                                                      defaultMessage="Unsave"
                                                      id="Challenge.unsave"
                                                      values={Object {}}
                                    />
                  </button>
</p>,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined start-challenge"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Start"
                                        id="Challenge.start"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Start"
                      id="Challenge.start"
                      values={Object {}}
/>,
                    "className": "button is-outlined start-challenge",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Start",
                      "id": "Challenge.start",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
              null,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    className="button is-outlined save-challenge-toggle"
                    onClick={[Function]}
>
                    <FormattedMessage
                                        defaultMessage="Unsave"
                                        id="Challenge.unsave"
                                        values={Object {}}
                    />
</button>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Unsave"
                      id="Challenge.unsave"
                      values={Object {}}
/>,
                    "className": "button is-outlined save-challenge-toggle",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Unsave",
                      "id": "Challenge.unsave",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "button",
                },
                "type": "p",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <header
            className="card-header"
            onClick={[Function]}
>
            <div>
                        <div
                                    className="challenge-list__item-title"
                        >
                                    <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                    >
                                                <SvgSymbol
                                                            sym="heart-icon"
                                                            viewBox="0 0 20 20"
                                                />
                                    </div>
                                    <div
                                                className="challenge-list__item__name"
                                    >
                                                Challenge 309
                                    </div>
                        </div>
                        <div
                                    className="challenge-list__item__project-name"
                        >
                                    foo
                        </div>
            </div>
            <a
                        aria-label="more options"
                        className="card-header-icon"
            >
                        <span
                                    className="icon"
                        />
            </a>
</header>,
          <div
            className="card-content"
>
            <div
                        className="challenge-list__item__difficulty"
            >
                        <span
                                    className="challenge-list__item__field-label"
                        >
                                    <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                    />
                        </span>
                        <span
                                    className="challenge-list__item__field-value"
                        >
                                    <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                    />
                        </span>
            </div>
            <div
                        className="challenge-list__item__blurb"
            >
                        <MarkdownContent
                                    markdown="Challenge 309 blurb"
                        />
            </div>
            <ChallengeProgress
                        challenge={
                                    Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                        }
            />
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                    >
                                                <FormattedMessage
                                                            defaultMessage="Unsave"
                                                            id="Challenge.unsave"
                                                            values={Object {}}
                                                />
                                    </button>
                        </p>
            </div>
</div>,
        ],
        "className": "card challenge-list__item",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <div
                                className="challenge-list__item-title"
                >
                                <div
                                                className="challenge-list__item-indicator-icon saved"
                                                title={undefined}
                                >
                                                <SvgSymbol
                                                                sym="heart-icon"
                                                                viewBox="0 0 20 20"
                                                />
                                </div>
                                <div
                                                className="challenge-list__item__name"
                                >
                                                Challenge 309
                                </div>
                </div>
                <div
                                className="challenge-list__item__project-name"
                >
                                foo
                </div>
</div>,
              <a
                aria-label="more options"
                className="card-header-icon"
>
                <span
                                className="icon"
                />
</a>,
            ],
            "className": "card-header",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="challenge-list__item-title"
>
                    <div
                                        className="challenge-list__item-indicator-icon saved"
                                        title={undefined}
                    >
                                        <SvgSymbol
                                                            sym="heart-icon"
                                                            viewBox="0 0 20 20"
                                        />
                    </div>
                    <div
                                        className="challenge-list__item__name"
                    >
                                        Challenge 309
                    </div>
</div>,
                  <div
                    className="challenge-list__item__project-name"
>
                    foo
</div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="challenge-list__item-indicator-icon saved"
                        title={undefined}
>
                        <SvgSymbol
                                                sym="heart-icon"
                                                viewBox="0 0 20 20"
                        />
</div>,
                      <div
                        className="challenge-list__item__name"
>
                        Challenge 309
</div>,
                    ],
                    "className": "challenge-list__item-title",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <SvgSymbol
                          sym="heart-icon"
                          viewBox="0 0 20 20"
/>,
                        "className": "challenge-list__item-indicator-icon saved",
                        "title": undefined,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "sym": "heart-icon",
                          "viewBox": "0 0 20 20",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Challenge 309",
                        "className": "challenge-list__item__name",
                      },
                      "ref": null,
                      "rendered": "Challenge 309",
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "foo",
                    "className": "challenge-list__item__project-name",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "more options",
                "children": <span
                  className="icon"
/>,
                "className": "card-header-icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "a",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="challenge-list__item__difficulty"
>
                <span
                                className="challenge-list__item__field-label"
                >
                                <FormattedMessage
                                                defaultMessage="Difficulty"
                                                id="ChallengeResultList.difficultyLabel"
                                                values={Object {}}
                                />
                </span>
                <span
                                className="challenge-list__item__field-value"
                >
                                <FormattedMessage
                                                defaultMessage="Expert"
                                                id="Challenge.difficulty.expert"
                                                values={Object {}}
                                />
                </span>
</div>,
              <div
                className="challenge-list__item__blurb"
>
                <MarkdownContent
                                markdown="Challenge 309 blurb"
                />
</div>,
              <ChallengeProgress
                challenge={
                                Object {
                                                "blurb": "Challenge 309 blurb",
                                                "description": "Challenge 309 description",
                                                "difficulty": 3,
                                                "id": 309,
                                                "name": "Challenge 309",
                                                "parent": Object {
                                                  "displayName": "foo",
                                                },
                                              }
                }
/>,
              <div
                className="field is-grouped"
>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined start-challenge"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Start"
                                                                id="Challenge.start"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-outlined save-challenge-toggle"
                                                onClick={[Function]}
                                >
                                                <FormattedMessage
                                                                defaultMessage="Unsave"
                                                                id="Challenge.unsave"
                                                                values={Object {}}
                                                />
                                </button>
                </p>
</div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="challenge-list__item__field-label"
>
                    <FormattedMessage
                                        defaultMessage="Difficulty"
                                        id="ChallengeResultList.difficultyLabel"
                                        values={Object {}}
                    />
</span>,
                  <span
                    className="challenge-list__item__field-value"
>
                    <FormattedMessage
                                        defaultMessage="Expert"
                                        id="Challenge.difficulty.expert"
                                        values={Object {}}
                    />
</span>,
                ],
                "className": "challenge-list__item__difficulty",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Difficulty"
                      id="ChallengeResultList.difficultyLabel"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-label",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Difficulty",
                      "id": "ChallengeResultList.difficultyLabel",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FormattedMessage
                      defaultMessage="Expert"
                      id="Challenge.difficulty.expert"
                      values={Object {}}
/>,
                    "className": "challenge-list__item__field-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultMessage": "Expert",
                      "id": "Challenge.difficulty.expert",
                      "values": Object {},
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <MarkdownContent
                  markdown="Challenge 309 blurb"
/>,
                "className": "challenge-list__item__blurb",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "markdown": "Challenge 309 blurb",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": Object {
                  "blurb": "Challenge 309 blurb",
                  "description": "Challenge 309 description",
                  "difficulty": 3,
                  "id": 309,
                  "name": "Challenge 309",
                  "parent": Object {
                    "displayName": "foo",
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined start-challenge"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Start"
                                                            id="Challenge.start"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                  null,
                  <p
                    className="control"
>
                    <button
                                        className="button is-outlined save-challenge-toggle"
                                        onClick={[Function]}
                    >
                                        <FormattedMessage
                                                            defaultMessage="Unsave"
                                                            id="Challenge.unsave"
                                                            values={Object {}}
                                        />
                    </button>
</p>,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined start-challenge"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Start"
                                            id="Challenge.start"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Start"
                        id="Challenge.start"
                        values={Object {}}
/>,
                      "className": "button is-outlined start-challenge",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Start",
                        "id": "Challenge.start",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
                null,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-outlined save-challenge-toggle"
                      onClick={[Function]}
>
                      <FormattedMessage
                                            defaultMessage="Unsave"
                                            id="Challenge.unsave"
                                            values={Object {}}
                      />
</button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FormattedMessage
                        defaultMessage="Unsave"
                        id="Challenge.unsave"
                        values={Object {}}
/>,
                      "className": "button is-outlined save-challenge-toggle",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultMessage": "Unsave",
                        "id": "Challenge.unsave",
                        "values": Object {},
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "button",
                  },
                  "type": "p",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders with props as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChallengePane
    intl={
      Object {
        "formatMessage": [MockFunction],
      }
    }
    saveChallenge={[MockFunction]}
    startChallenge={[MockFunction]}
    unsaveChallenge={[MockFunction]}
    user={
      Object {
        "id": 11,
        "savedChallenges": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <Component
          intl={
            Object {
              "formatMessage": [MockFunction],
            }
          }
          saveChallenge={[MockFunction]}
          startChallenge={[MockFunction]}
          unsaveChallenge={[MockFunction]}
          user={
            Object {
              "id": 11,
              "savedChallenges": Array [],
            }
          }
        />,
        <div
          className="challenge-pane"
        >
          <MediaQuery
            maxWidth={900}
            values={Object {}}
          >
            <Sidebar
              className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
              isActive={true}
              toggleMinimized={[Function]}
            >
              <Connect(Connect(Component))
                intl={
                  Object {
                    "formatMessage": [MockFunction],
                  }
                }
                saveChallenge={[MockFunction]}
                startChallenge={[MockFunction]}
                unsaveChallenge={[MockFunction]}
                user={
                  Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  }
                }
              />
            </Sidebar>
          </MediaQuery>
          <MediaQuery
            minWidth={901}
            values={Object {}}
          >
            <Sidebar
              className="inline full-screen-height with-shadow challenge-pane__results"
              isActive={true}
            >
              <Connect(Connect(Component))
                intl={
                  Object {
                    "formatMessage": [MockFunction],
                  }
                }
                saveChallenge={[MockFunction]}
                startChallenge={[MockFunction]}
                unsaveChallenge={[MockFunction]}
                user={
                  Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  }
                }
              />
            </Sidebar>
          </MediaQuery>
          <Connect(MapPane)>
            <Connect(Connect(Connect(Component)))
              intl={
                Object {
                  "formatMessage": [MockFunction],
                }
              }
              saveChallenge={[MockFunction]}
              startChallenge={[MockFunction]}
              unsaveChallenge={[MockFunction]}
              user={
                Object {
                  "id": 11,
                  "savedChallenges": Array [],
                }
              }
            />
          </Connect(MapPane)>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "intl": Object {
            "formatMessage": [MockFunction],
          },
          "saveChallenge": [MockFunction],
          "startChallenge": [MockFunction],
          "unsaveChallenge": [MockFunction],
          "user": Object {
            "id": 11,
            "savedChallenges": Array [],
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <MediaQuery
              maxWidth={900}
              values={Object {}}
            >
              <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
                isActive={true}
                toggleMinimized={[Function]}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>
            </MediaQuery>,
            <MediaQuery
              minWidth={901}
              values={Object {}}
            >
              <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results"
                isActive={true}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>
            </MediaQuery>,
            <Connect(MapPane)>
              <Connect(Connect(Connect(Component)))
                intl={
                  Object {
                    "formatMessage": [MockFunction],
                  }
                }
                saveChallenge={[MockFunction]}
                startChallenge={[MockFunction]}
                unsaveChallenge={[MockFunction]}
                user={
                  Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  }
                }
              />
            </Connect(MapPane)>,
          ],
          "className": "challenge-pane",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
                isActive={true}
                toggleMinimized={[Function]}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>,
              "maxWidth": 900,
              "values": Object {},
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />,
                "className": "inline full-screen-height with-shadow challenge-pane__results is-minimized",
                "isActive": true,
                "toggleMinimized": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "intl": Object {
                    "formatMessage": [MockFunction],
                  },
                  "saveChallenge": [MockFunction],
                  "startChallenge": [MockFunction],
                  "unsaveChallenge": [MockFunction],
                  "user": Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results"
                isActive={true}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>,
              "minWidth": 901,
              "values": Object {},
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />,
                "className": "inline full-screen-height with-shadow challenge-pane__results",
                "isActive": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "intl": Object {
                    "formatMessage": [MockFunction],
                  },
                  "saveChallenge": [MockFunction],
                  "startChallenge": [MockFunction],
                  "unsaveChallenge": [MockFunction],
                  "user": Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Connect(Connect(Connect(Component)))
                intl={
                  Object {
                    "formatMessage": [MockFunction],
                  }
                }
                saveChallenge={[MockFunction]}
                startChallenge={[MockFunction]}
                unsaveChallenge={[MockFunction]}
                user={
                  Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  }
                }
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "challenge": undefined,
                "intl": Object {
                  "formatMessage": [MockFunction],
                },
                "onTaskClick": undefined,
                "saveChallenge": [MockFunction],
                "startChallenge": [MockFunction],
                "unsaveChallenge": [MockFunction],
                "user": Object {
                  "id": 11,
                  "savedChallenges": Array [],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <Component
            intl={
              Object {
                "formatMessage": [MockFunction],
              }
            }
            saveChallenge={[MockFunction]}
            startChallenge={[MockFunction]}
            unsaveChallenge={[MockFunction]}
            user={
              Object {
                "id": 11,
                "savedChallenges": Array [],
              }
            }
          />,
          <div
            className="challenge-pane"
          >
            <MediaQuery
              maxWidth={900}
              values={Object {}}
            >
              <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
                isActive={true}
                toggleMinimized={[Function]}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>
            </MediaQuery>
            <MediaQuery
              minWidth={901}
              values={Object {}}
            >
              <Sidebar
                className="inline full-screen-height with-shadow challenge-pane__results"
                isActive={true}
              >
                <Connect(Connect(Component))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Sidebar>
            </MediaQuery>
            <Connect(MapPane)>
              <Connect(Connect(Connect(Component)))
                intl={
                  Object {
                    "formatMessage": [MockFunction],
                  }
                }
                saveChallenge={[MockFunction]}
                startChallenge={[MockFunction]}
                unsaveChallenge={[MockFunction]}
                user={
                  Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  }
                }
              />
            </Connect(MapPane)>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "intl": Object {
              "formatMessage": [MockFunction],
            },
            "saveChallenge": [MockFunction],
            "startChallenge": [MockFunction],
            "unsaveChallenge": [MockFunction],
            "user": Object {
              "id": 11,
              "savedChallenges": Array [],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <MediaQuery
                maxWidth={900}
                values={Object {}}
              >
                <Sidebar
                  className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
                  isActive={true}
                  toggleMinimized={[Function]}
                >
                  <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />
                </Sidebar>
              </MediaQuery>,
              <MediaQuery
                minWidth={901}
                values={Object {}}
              >
                <Sidebar
                  className="inline full-screen-height with-shadow challenge-pane__results"
                  isActive={true}
                >
                  <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />
                </Sidebar>
              </MediaQuery>,
              <Connect(MapPane)>
                <Connect(Connect(Connect(Component)))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />
              </Connect(MapPane)>,
            ],
            "className": "challenge-pane",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Sidebar
                  className="inline full-screen-height with-shadow challenge-pane__results is-minimized"
                  isActive={true}
                  toggleMinimized={[Function]}
                >
                  <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />
                </Sidebar>,
                "maxWidth": 900,
                "values": Object {},
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />,
                  "className": "inline full-screen-height with-shadow challenge-pane__results is-minimized",
                  "isActive": true,
                  "toggleMinimized": [Function],
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "intl": Object {
                      "formatMessage": [MockFunction],
                    },
                    "saveChallenge": [MockFunction],
                    "startChallenge": [MockFunction],
                    "unsaveChallenge": [MockFunction],
                    "user": Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Sidebar
                  className="inline full-screen-height with-shadow challenge-pane__results"
                  isActive={true}
                >
                  <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />
                </Sidebar>,
                "minWidth": 901,
                "values": Object {},
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Connect(Connect(Component))
                    intl={
                      Object {
                        "formatMessage": [MockFunction],
                      }
                    }
                    saveChallenge={[MockFunction]}
                    startChallenge={[MockFunction]}
                    unsaveChallenge={[MockFunction]}
                    user={
                      Object {
                        "id": 11,
                        "savedChallenges": Array [],
                      }
                    }
                  />,
                  "className": "inline full-screen-height with-shadow challenge-pane__results",
                  "isActive": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "intl": Object {
                      "formatMessage": [MockFunction],
                    },
                    "saveChallenge": [MockFunction],
                    "startChallenge": [MockFunction],
                    "unsaveChallenge": [MockFunction],
                    "user": Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Connect(Connect(Connect(Component)))
                  intl={
                    Object {
                      "formatMessage": [MockFunction],
                    }
                  }
                  saveChallenge={[MockFunction]}
                  startChallenge={[MockFunction]}
                  unsaveChallenge={[MockFunction]}
                  user={
                    Object {
                      "id": 11,
                      "savedChallenges": Array [],
                    }
                  }
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "challenge": undefined,
                  "intl": Object {
                    "formatMessage": [MockFunction],
                  },
                  "onTaskClick": undefined,
                  "saveChallenge": [MockFunction],
                  "startChallenge": [MockFunction],
                  "unsaveChallenge": [MockFunction],
                  "user": Object {
                    "id": 11,
                    "savedChallenges": Array [],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
